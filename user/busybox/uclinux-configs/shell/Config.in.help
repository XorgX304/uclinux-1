
NO_IDEA
	  Choose a shell. The ash shell is the most bash compatible
	  and full featured one.

CONFIG_USER_BUSYBOX_ASH
	  Tha 'ash' shell adds about 60k in the default configuration and is
	  the most complete and most pedantically correct shell included with
	  busybox.  This shell is actually a derivative of the Debian 'dash'
	  shell (by Herbert Xu), which was created by porting the 'ash' shell
	  (written by Kenneth Almquist) from NetBSD.

CONFIG_USER_BUSYBOX_ASH_JOB_CONTROL
	  Enable job control in the ash shell.

CONFIG_USER_BUSYBOX_ASH_READ_NCHARS
	  'read -n N' will return a value after N characters have been read.
	  'read -s' will read without echoing the user's input.

CONFIG_USER_BUSYBOX_ASH_READ_TIMEOUT
	  'read -t S' will return a value after S seconds have passed.
	  This implementation will allow fractional seconds, expressed
	  as a decimal fraction, e.g. 'read -t 2.5 foo'.

CONFIG_USER_BUSYBOX_ASH_ALIAS
	  Enable alias support in the ash shell.

CONFIG_USER_BUSYBOX_ASH_MATH_SUPPORT
	  Enable math support in the ash shell.

CONFIG_USER_BUSYBOX_ASH_MATH_SUPPORT_64
	  Enable 64-bit math support in the ash shell.  This will make
	  the shell slightly larger, but will allow computation with very
	  large numbers.

CONFIG_USER_BUSYBOX_ASH_GETOPTS
	  Enable getopts builtin in the ash shell.

CONFIG_USER_BUSYBOX_ASH_BUILTIN_ECHO
	  Enable support for echo, built in to ash.

CONFIG_USER_BUSYBOX_ASH_BUILTIN_TEST
	  Enable support for test, built in to ash.

CONFIG_USER_BUSYBOX_ASH_CMDCMD
	  Enable support for the ash 'command' builtin, which allows
	  you to run the specified command with the specified arguments,
	  even when there is an ash builtin command with the same name.

CONFIG_USER_BUSYBOX_ASH_MAIL
	  Enable "check for new mail" in the ash shell.

CONFIG_USER_BUSYBOX_ASH_OPTIMIZE_FOR_SIZE
	  Compile ash for reduced size at the price of speed.

CONFIG_USER_BUSYBOX_ASH_RANDOM_SUPPORT
	  Enable pseudorandom generator and dynamic variable "$RANDOM".
	  Each read of "$RANDOM" will generate a new pseudorandom value.
	  You can reset the generator by using a specified start value.
	  After "unset RANDOM" then generator will switch off and this
	  variable will no longer have special treatment.

CONFIG_USER_BUSYBOX_ASH_EXPAND_PRMT
	  "PS#" may be contain volatile content, such as backquote commands.
	  This option recreates the prompt string from the environment
	  variable each time it is displayed.

CONFIG_USER_BUSYBOX_HUSH
	  hush is a very small shell (just 18k) and it has fairly complete
	  Bourne shell grammar.  It even handles all the normal flow control
	  options such as if/then/elif/else/fi, for/in/do/done, while loops,
	  etc.

	  It does not handle case/esac, select, function, here documents ( <<
	  word ), arithmetic expansion, aliases, brace expansion, tilde
	  expansion, &> and >& redirection of stdout+stderr, etc.


CONFIG_USER_BUSYBOX_LASH
	  lash is the very smallest shell (adds just 10k) and it is quite
	  usable as a command prompt, but it is not suitable for any but the
	  most trivial scripting (such as an initrd that calls insmod a few
	  times) since it does not understand any Bourne shell grammar.  It
	  does handle pipes, redirects, and job control though.  Adding in
	  command editing makes it a very nice lightweight command prompt.


CONFIG_USER_BUSYBOX_MSH
	  The minix shell (adds just 30k) is quite complete and handles things
	  like for/do/done, case/esac and all the things you expect a Bourne
	  shell to do.  It is not always pedantically correct about Bourne
	  shell grammar (try running the shell testscript "tests/sh.testcases"
	  on it and compare vs bash) but for most things it works quite well.
	  It also uses only vfork, so it can be used on uClinux systems.

CONFIG_USER_BUSYBOX_FEATURE_SH_EXTRA_QUIET
	  Remove the busybox introduction when starting a shell.

CONFIG_USER_BUSYBOX_FEATURE_SH_STANDALONE_SHELL
	  This option causes the selected busybox shell to use busybox applets
	  in preference to executables in the PATH whenever possible.  For
	  example, entering the command 'ifconfig' into the shell would cause
	  busybox to use the ifconfig busybox applet.  Specifying the fully
	  qualified executable name, such as '/sbin/ifconfig' will still
	  execute the /sbin/ifconfig executable on the filesystem.  This option
	  is generally used when creating a statically linked version of busybox
	  for use as a rescue shell, in the event that you screw up your system.

	  Note that this will *also* cause applets to take precedence
	  over shell builtins of the same name.  So turning this on will
	  eliminate any performance gained by turning on the builtin "echo"
	  and "test" commands in ash.

	  Note that when using this option, the shell will attempt to directly
	  run '/bin/busybox'.  If you do not have the busybox binary sitting in
	  that exact location with that exact name, this option will not work at
	  all.

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_EDITING
	  Enable command editing in shell.

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_EDITING_VI
	  Enable vi-style line editing in the shell.  This mode can be
	  turned on and off with "set -o vi" and "set +o vi".

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_HISTORY
	  Specify command history size in shell.

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_SAVEHISTORY
	  Enable history saving in ash shell.

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_TAB_COMPLETION
	  Enable tab completion in shell.

CONFIG_USER_BUSYBOX_FEATURE_COMMAND_USERNAME_COMPLETION
	  Enable username completion in shell.

CONFIG_USER_BUSYBOX_FEATURE_SH_FANCY_PROMPT
	  Setting this option allows for prompts to use things like \w and
	  \$ and also using escape codes.

