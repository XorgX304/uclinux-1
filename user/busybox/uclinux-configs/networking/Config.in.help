###
### DO NOT EDIT THIS FILE; IT IS AUTO-GENERATED
### SEE kconfig-to-uclinux.awk FOR MORE INFO
###

CONFIG_USER_BUSYBOX_FEATURE_IPV6
  Enable IPv6 support in busybox.
  This adds IPv6 support in the networking applets.

CONFIG_USER_BUSYBOX_ARP
  Manipulate the system ARP cache

CONFIG_USER_BUSYBOX_ARPING
  Ping hosts by ARP packets

CONFIG_USER_BUSYBOX_DNSD
  Small and static DNS server daemon.

CONFIG_USER_BUSYBOX_ETHER_WAKE
  Send a magic packet to wake up sleeping machines.

CONFIG_USER_BUSYBOX_FAKEIDENTD
  fakeidentd listens on the ident port and returns a predefined
  fake value on any query.

CONFIG_USER_BUSYBOX_FTPGET
  Retrieve a remote file via FTP.

CONFIG_USER_BUSYBOX_FTPPUT
  Store a remote file via FTP.

CONFIG_USER_BUSYBOX_FEATURE_FTPGETPUT_LONG_OPTIONS
  Support long options for the ftpget/ftpput applet.

CONFIG_USER_BUSYBOX_HOSTNAME
  Show or set the system's host name

CONFIG_USER_BUSYBOX_HTTPD
  Serve web pages via an HTTP server.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_RELOAD_CONFIG_SIGHUP
  This option enables processing of SIGHUP to reload cached
  configuration settings.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_SETUID
  This option allows the server to run as a specific user
  rather than defaulting to the user that starts the server.
  Use of this option requires special privileges to change to a
  different user.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_BASIC_AUTH
  Utilizes password settings from /etc/httpd.conf for basic
  authentication on a per url basis.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_AUTH_MD5
  Enables basic per URL authentication from /etc/httpd.conf
  using md5 passwords.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_CONFIG_WITH_MIME_TYPES
  This option enables support for additional MIME types at
  run-time to be specified in the configuration file.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_CGI
  This option allows scripts and executables to be invoked
  when specific URLs are requested.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_CONFIG_WITH_SCRIPT_INTERPR
  This option enables support for running scripts through an
  interpreter. Turn this on if you want PHP scripts to work
  properly. You need to supply an addition line in your httpd
  config file:
  *.php:/path/to/your/php

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_SET_REMOTE_PORT_TO_ENV
  Use of this option can assist scripts in generating
  references that contain a unique port number.

CONFIG_USER_BUSYBOX_FEATURE_HTTPD_ENCODE_URL_STR
  This option allows html encoding arbitrary
  strings for display of the browser.  Output goes to stdout.
  For example, httpd -e "<Hello World>" as
  "&#60Hello&#32World&#62".

CONFIG_USER_BUSYBOX_IFCONFIG
  Ifconfig is used to configure the kernel-resident network interfaces.

CONFIG_USER_BUSYBOX_FEATURE_IFCONFIG_STATUS
  If ifconfig is called with no arguments it will display the status
  of the currently active interfaces.

CONFIG_USER_BUSYBOX_FEATURE_IFCONFIG_SLIP
  Allow "keepalive" and "outfill" support for SLIP.  If you're not
  planning on using serial lines, leave this unchecked.

CONFIG_USER_BUSYBOX_FEATURE_IFCONFIG_MEMSTART_IOADDR_IRQ
  Allow the start address for shared memory, start address for I/O,
  and/or the interrupt line used by the specified device.

CONFIG_USER_BUSYBOX_FEATURE_IFCONFIG_HW
  Set the hardware address of this interface, if the device driver
  supports  this  operation.  Currently, we only support the 'ether'
  class.

CONFIG_USER_BUSYBOX_FEATURE_IFCONFIG_BROADCAST_PLUS
  Setting this will make ifconfig attempt to find the broadcast
  automatically if the value '+' is used.

CONFIG_USER_BUSYBOX_IFUPDOWN
  Activate or deactivate the specified interfaces.  This applet makes
  use of either "ifconfig" and "route" or the "ip" command to actually
  configure network interfaces.  Therefore, you will probably also want
  to enable either IFCONFIG and ROUTE, or enable
  FEATURE_IFUPDOWN_IP and the various IP options.  Of
  course you could use non-busybox versions of these programs, so
  against my better judgement (since this will surely result in plenty
  of support questions on the mailing list), I do not force you to
  enable these additional options.  It is up to you to supply either
  "ifconfig" and "route" or the "ip" command, either via busybox or via
  standalone utilities.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IP
  Use the iproute "ip" command to implement "ifup" and "ifdown", rather
  than the default of using the older 'ifconfig' and 'route' utilities.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IP_BUILTIN
  Use the busybox iproute "ip" applet to implement "ifupdown".

  If left disabled, you must install the full-blown iproute2
  utility or the  "ifup" and "ifdown" applets will not work.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IFCONFIG_BUILTIN
  Use the busybox iproute "ifconfig" and "route" applets to
  implement the "ifup" and "ifdown" utilities.

  If left disabled, you must install the full-blown ifconfig
  and route utilities, or the  "ifup" and "ifdown" applets will not
  work.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IPV4
  If you want busybox to talk IPv4, leave this on.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IPV6
  If you need support for IPv6, turn this option on.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_IPX
  If this option is selected you can use busybox to work with IPX
  networks.

CONFIG_USER_BUSYBOX_FEATURE_IFUPDOWN_MAPPING
  This enables support for the "mapping" stanza, unless you have
  a weird network setup you don't need it.

CONFIG_USER_BUSYBOX_INETD
  Internet superserver daemon

CONFIG_USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_ECHO
  Echo received data internal inetd service

CONFIG_USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_DISCARD
  Internet /dev/null internal inetd service

CONFIG_USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_TIME
  Return 32 bit time since 1900 internal inetd service

CONFIG_USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_DAYTIME
  Return human-readable time internal inetd service

CONFIG_USER_BUSYBOX_FEATURE_INETD_SUPPORT_BUILTIN_CHARGEN
  Familiar character generator internal inetd service

CONFIG_USER_BUSYBOX_FEATURE_INETD_RPC
  Support Sun-RPC based services

CONFIG_USER_BUSYBOX_IP
  The "ip" applet is a TCP/IP interface configuration and routing
  utility.  You generally don't need "ip" to use busybox with
  TCP/IP.

CONFIG_USER_BUSYBOX_FEATURE_IP_ADDRESS
  Address manipulation support for the "ip" applet.

CONFIG_USER_BUSYBOX_FEATURE_IP_LINK
  Configure network devices with "ip".

CONFIG_USER_BUSYBOX_FEATURE_IP_ROUTE
  Add support for routing table management to "ip".

CONFIG_USER_BUSYBOX_FEATURE_IP_TUNNEL
  Add support for tunneling commands to "ip".

CONFIG_USER_BUSYBOX_FEATURE_IP_RULE
  Add support for rule commands to "ip".

CONFIG_USER_BUSYBOX_FEATURE_IP_SHORT_FORMS
  Also support short-form of ip <OBJECT> commands:
  ip addr   -> ipaddr
  ip link   -> iplink
  ip route  -> iproute
  ip tunnel -> iptunnel

  Say N unless you desparately need the short form of the ip
  object commands.

CONFIG_USER_BUSYBOX_IPCALC
  ipcalc takes an IP address and netmask and calculates the
  resulting broadcast, network, and host range.

CONFIG_USER_BUSYBOX_FEATURE_IPCALC_FANCY
  Adds the options hostname, prefix and silent to the output of "ipcalc".

CONFIG_USER_BUSYBOX_FEATURE_IPCALC_LONG_OPTIONS
  Support long options for the ipcalc applet.

CONFIG_USER_BUSYBOX_NAMEIF
  nameif is used to rename network interface by its MAC address.
  Renamed interfaces MUST be in the down state.
  It is possible to use a file (default: /etc/mactab)
  with list of new interface names and MACs.
  Maximum interface name length: IF_NAMESIZE = 16
  File fields are separated by space or tab.
  File format:
  # Comment
  new_interface_name    XX:XX:XX:XX:XX:XX

CONFIG_USER_BUSYBOX_NC
  A simple Unix utility which reads and writes data across network
  connections.

CONFIG_USER_BUSYBOX_NC_SERVER
  Allow netcat to act as a server.

CONFIG_USER_BUSYBOX_NC_EXTRA
  Add -e (support for executing the rest of the command line after
  making or receiving a successful connection), -i (delay interval for
  lines sent), -w (timeout for initial connection).

CONFIG_USER_BUSYBOX_NETSTAT
  netstat prints information about the Linux networking subsystem.

CONFIG_USER_BUSYBOX_NSLOOKUP
  nslookup is a tool to query Internet name servers.

CONFIG_USER_BUSYBOX_PING
  ping uses the ICMP protocol's mandatory ECHO_REQUEST datagram to
  elicit an ICMP ECHO_RESPONSE from a host or gateway.

CONFIG_USER_BUSYBOX_FEATURE_FANCY_PING
  Make the output from the ping applet include statistics, and at the
  same time provide full support for ICMP packets.

CONFIG_USER_BUSYBOX_PING6
  This will give you a ping that can talk IPv6.

CONFIG_USER_BUSYBOX_FEATURE_FANCY_PING6
  Make the output from the ping6 applet include statistics, and at the
  same time provide full support for ICMP packets.

CONFIG_USER_BUSYBOX_ROUTE
  Route displays or manipulates the kernel's IP routing tables.

CONFIG_USER_BUSYBOX_TELNET
  Telnet is an interface to the TELNET protocol, but is also commonly
  used to test other simple protocols.

CONFIG_USER_BUSYBOX_FEATURE_TELNET_TTYPE
  Setting this option will forward the TERM environment variable to the
  remote host you are connecting to.  This is useful to make sure that
  things like ANSI colors and other control sequences behave.

CONFIG_USER_BUSYBOX_FEATURE_TELNET_AUTOLOGIN
  Setting this option will forward the USER environment variable to the
  remote host you are connecting to. This is useful when you need to
  log into a machine without telling the username (autologin). This
  option enables `-a' and `-l USER' arguments.

CONFIG_USER_BUSYBOX_TELNETD
  A daemon for the TELNET protocol, allowing you to log onto the host
  running the daemon.  Please keep in mind that the TELNET protocol
  sends passwords in plain text.  If you can't afford the space for an
  SSH daemon and you trust your network, you may say 'y' here.  As a
  more secure alternative, you should seriously consider installing the
  very small Dropbear SSH daemon instead:
	http://matt.ucc.asn.au/dropbear/dropbear.html

  Note that for busybox telnetd to work you need several things:
  First of all, your kernel needs:
	  UNIX98_PTYS=y
	  DEVPTS_FS=y

  Next, you need a /dev/pts directory on your root filesystem:

	  $ ls -ld /dev/pts
	  drwxr-xr-x  2 root root 0 Sep 23 13:21 /dev/pts/

  Next you need the pseudo terminal master multiplexer /dev/ptmx:

	  $ ls -la /dev/ptmx
	  crw-rw-rw-  1 root tty 5, 2 Sep 23 13:55 /dev/ptmx

  Any /dev/ttyp[0-9]* files you may have can be removed.
  Next, you need to mount the devpts filesystem on /dev/pts using:

	  mount -t devpts devpts /dev/pts

  You need to be sure that Busybox has LOGIN and
  FEATURE_SUID enabled.  And finally, you should make
  certain that Busybox has been installed setuid root:

	chown root.root /bin/busybox
	chmod 4755 /bin/busybox

  with all that done, telnetd _should_ work....


CONFIG_USER_BUSYBOX_FEATURE_TELNETD_STANDALONE
  Selecting this will make telnetd able to run standalone.

CONFIG_USER_BUSYBOX_TFTP
  This enables the Trivial File Transfer Protocol client program.  TFTP
  is usually used for simple, small transfers such as a root image
  for a network-enabled bootloader.

CONFIG_USER_BUSYBOX_FEATURE_TFTP_GET
  Add support for the GET command within the TFTP client.  This allows
  a client to retrieve a file from a TFTP server.

CONFIG_USER_BUSYBOX_FEATURE_TFTP_PUT
  Add support for the PUT command within the TFTP client.  This allows
  a client to transfer a file to a TFTP server.

CONFIG_USER_BUSYBOX_FEATURE_TFTP_BLOCKSIZE
  Allow the client to specify the desired block size for transfers.

CONFIG_USER_BUSYBOX_DEBUG_TFTP
  Enable debug settings for tftp.  This is useful if you're running
  into problems with tftp as the protocol doesn't help you much when
  you run into problems.

CONFIG_USER_BUSYBOX_TRACEROUTE
  Utility to trace the route of IP packets

CONFIG_USER_BUSYBOX_FEATURE_TRACEROUTE_VERBOSE
  Add some verbosity to traceroute.  This includes amongst other things
  hostnames and ICMP response types.

CONFIG_USER_BUSYBOX_FEATURE_TRACEROUTE_SOURCE_ROUTE
  Add option to specify a loose source route gateway
  (8 maximum).

CONFIG_USER_BUSYBOX_FEATURE_TRACEROUTE_USE_ICMP
  Add feature to allow for ICMP ECHO instead of UDP datagrams.

source ../user/busybox/uclinux-configs/networking/udhcp/Config.in.help
CONFIG_USER_BUSYBOX_VCONFIG
  Creates, removes, and configures VLAN interfaces

CONFIG_USER_BUSYBOX_WGET
  wget is a utility for non-interactive download of files from HTTP,
  HTTPS, and FTP servers.

CONFIG_USER_BUSYBOX_FEATURE_WGET_STATUSBAR
  Enable the transfer progress bar for wget transfers.

CONFIG_USER_BUSYBOX_FEATURE_WGET_AUTHENTICATION
  Support authenticated HTTP transfers.

CONFIG_USER_BUSYBOX_FEATURE_WGET_IP6_LITERAL
  Support IPv6 address literal notation in URLs.

CONFIG_USER_BUSYBOX_FEATURE_WGET_LONG_OPTIONS
  Support long options for the wget applet.

CONFIG_USER_BUSYBOX_ZCIP
  ZCIP provides ZeroConf IPv4 address selection, according to RFC 3927.
  It's a daemon that allocates and defends a dynamically assigned
  address on the 169.254/16 network, requiring no system administrator.

  See http://www.zeroconf.org for further details, and "zcip.script"
  in the busybox examples.

