#!/usr/bin/expect --

#
# Build Kernel for MMC/SD test
#

log_file build_spimmc_kernel_log
send_user "Starting build_spimmc_kernel.exp\n"

set user /home/test
set uclinux_path $user/checkout/kernel/uClinux-dist

set board_type [lindex $argv 0]
send_log "\n#### board_type is $board_type\n"

if { $argc < 1 } {
   puts "Please input: board_type."
   exit
} 

if { $argc >= 2 } {
   set uclinux_path [lindex $argv 1]
   send_log "\n#### uclinux_path is $uclinux_path\n"
}

proc step { message } {
   global step_sequence_number
   puts "\n******************************************************************"
   puts "STEP $step_sequence_number: $message\n\n"
   send_log "\n************** STEP :$step_sequence_number: $message\n\n"
   incr step_sequence_number
}

set step_sequence_number 1

step "Make config"

cd $uclinux_path
set timeout 300
spawn make config

while 1 {
   expect {
     -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP, BF561-EZKIT.*\\\[.*]" {
             send "$board_type\r"
      }

      "\\\(*) \\\[*]" {
             send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
             puts "End of configuration"
             break
      }
      timeout {
             puts "\n\nFATAL ERROR: config prompt timeout in make config"

      }
   }
}

cd $uclinux_path
set timeout 300
spawn make config

#tee "Begin the interactive process of configuration"
while 1 {
   expect {

      -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP, BF561-EZKIT.*\\\[.*]" {
         send "$board_type\r"
      }

      -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
         send "y\r"
      }

      -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
         send "y\r"
      }

      -re "Sound card support \\\(SOUND\\\).*\\\[./././.]" {
         send "n\r"
      }

      -re "MSDOS fs support \\\(MSDOS_FS\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "VFAT \\\(Windows-95\\\) fs support \\\(VFAT_FS\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "Default codepage for FAT \\\(FAT_DEFAULT_CODEPAGE\\\).*\\\[.*]" {
         send "850\r"
      }

      -re "Codepage 437 \\\(United States, Canada\\\) \\\(NLS_CODEPAGE_437\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "Codepage 850 \\\(Europe\\\) \\\(NLS_CODEPAGE_850\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "NLS ISO 8859-1  \\\(Latin 1; Western European Languages\\\) \\\(NLS_ISO8859_1\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "MMC/SD for SPI support \\\(EXPERIMENTAL\\\) \\\(SPI_MMC\\\).*\\\[./././.]" {
         send "y\r"
      }

      -re "SPI chip select signal for MMC/SD card \\\(SPI_MMC_CS_CHAN\\\).*\\\[.*]" {
         send "4\r"
      }

      -re "fdisk \\\(CONFIG_USER_FDISK_FDISK\\\).*\\\[././.]" {
         send "y\r"
      }

      -re "e2fsck \\\(CONFIG_USER_E2FSPROGS_E2FSCK_E2FSCK\\\).*\\\[././.]" {
         send "y\r"
      }

      -re "mke2fs \\\(CONFIG_USER_E2FSPROGS_MISC_MKE2FS\\\).*\\\[././.]" {
         send "y\r"
      }

      -re "badblocks \\\(CONFIG_USER_E2FSPROGS_MISC_BADBLOCKS\\\).*\\\[././.]" {
         send "y\r"
      }

      -re "mkdosfs \\\(CONFIG_USER_DOSFSTOOLS_MKDOSFS\\\).*\\\[././.]" {
         send "y\r"
      }

      "\\\(*) \\\[*]" {
         send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
         send "\r"
      }

      eof {
         puts "End of configuration"
         break
      }
      timeout {
         puts "\n\nFATAL ERROR: config prompt timeout in make config"
      }
   }
}

step "Make"

cd $uclinux_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
   expect {
      "Entering directory" { }
      "Leaving directory" { set bfin_make_status success }
      "Error" {set bfin_make_status failure }
      "/bin/sh" { }
      eof { break }
   }
}

if { $bfin_make_status == "failure" } {
   puts "ERROR: Error somewhere during make"
}    
     
step "Copy linux"
  
set timeout 8
cd $uclinux_path
exec cp images/linux.ext2  /tftpboot/linux

log_file

send_user "\nKernel building for SPI MMC/SD test finishes!\n"
