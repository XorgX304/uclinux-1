#!/usr/bin/expect
log_file spi_flash_images_log
send_user "Starting spi_flash_images.exp \n"

source ../kernel_config.exp
set TEST_PASS pass
set TEST_FAIL fail

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

step "Start kermit"

send_user "Start up kermit on port $ttydev\n"

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 50
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   send_error "ERROR: Failed to start up kermit\n"
                   exit
		}
		timeout {
                   send_error "ERROR: Time out starting up kermit\n"
                   exit
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send [lindex $kparams $i]

   while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                   send_error "ERROR: Failed to set up kermit parameters\n"
                    exit
		 }

		 timeout {
                    send_error "ERROR: Time out setting up kermit parameters\n"
                    exit
		 }
	  }
    }
}

send "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     send_error "ERROR: Can't connect to serial port\n"
		     exit }
	}
}

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect ">"
	send_user "sending reboot\n"
	send "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {

         "Hit any key " {
	     send "\3"	     
         }

	 ">" {
	     send_user "successful reset attempt\n"	    
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"            
             break
         }
      }
   }
	
###########################################################################################################

  
send -s "mw.b 0x1000000 0xff 0x700000\r"

while 1 {
set timeout 500
expect {

	">" {
	
	break
	}

	timeout {
	send_user "ERROR: read eeprom error\n"
	set temp_status_flag $TEST_FAIL	
	break
	}
}
}


send -s "eeprom write 0x1000000 0x100000 0x700000\r"

while 1 {
set timeout 500
expect {

	"EEPROM*write*done" {
	set write_eeprom_flag $TEST_PASS
	break
	}

	timeout {
	send_user "ERROR: write eeprom error\n"
	set temp_status_flag $TEST_FAIL
	break
	}
}
}


##########################################################################################################
   	    
set timeout 120

send -s "tftp 0x1000000 $compressed_kernel_only_image\r"
while 1 {
expect {
	
	"done" {
	set tftp_flag SUCCESS
	break
	}
	
		
	timeout {
	send_user "ERROR: Uboot locked up during tftp\n"
	
	break
	}
}
}

expect ">"   
send -s "eeprom write 0x1000000 0x40000 0xc0000\r"

while 1 {
	set timeout 500
	expect {

	    "EEPROM*write*done" {
		set write_eeprom_flag $TEST_PASS
		break
	    }
    
	    timeout {
		send_user "ERROR: write eeprom error\n"
		set temp_status_flag $TEST_FAIL
		break
	    }
	}
    }
  
expect ">"   
send -s "eeprom read 0x2000000 0x40000 0xc0000\r"

while 1 {
	set timeout 500
	expect {

	    "EEPROM*read*done" {
		set read_eeprom_flag $TEST_PASS
		break
	    }
    
	    timeout {
		send_user "ERROR: read eeprom error\n"
		set temp_status_flag $TEST_FAIL
		break
	    }
	}
    }

expect ">"
send -s "cmp.b 0x1000000 0x2000000 0xc0000\r"

while 1 {
	set timeout 15
	expect {

	  -re  "Total of [expr 0xc0000] bytes were the same" {
		set temp_status_flag $TEST_PASS
		break
	    }
    
	    timeout {
		send_user "ERROR: compare eeprom error\n"
		set temp_status_flag $TEST_FAIL
		exit
	    }
	}
    }

################################################################################################################
     
set timeout 120

send -s "tftp 0x1000000 $jffs2_rootfs_image\r"
while 1 {
expect {
	
	"done" {
	set tftp_flag SUCCESS
	break
	}
	
		
	timeout {
	send_user "ERROR: Uboot locked up during tftp\n"
	
	break
	}
}
}

expect ">"   
send -s "eeprom write 0x1000000 0x100000 0x700000\r"

while 1 {
	set timeout 500
	expect {

	    "EEPROM*write*done" {
		set write_eeprom_flag $TEST_PASS
		break
	    }
    
	    timeout {
		send_user "ERROR: write eeprom error\n"
		set temp_status_flag $TEST_FAIL
		break
	    }
	}
    }
  

    
expect ">"
send -s "set bootargs root=/dev/mtdblock2 rw rootfstype=jffs2 \r"
expect ">"
send -s "save\r"
expect ">"
send -s "bootm 0x2000000\r"

while 1 {
	set timeout 35
	expect {

	    "root:~>" {
		send_user "Boot from spi flash success\n"
		break
	    }
    
	    timeout {
		send_user "ERROR: boot from spi flash error\n"
		set temp_status_flag $TEST_FAIL
	
		break
	    }
	}
    }
    
    
     
log_file
	  
send_user "Ending spi_flash_images_test.exp\n"
