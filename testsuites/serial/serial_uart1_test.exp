#!/usr/bin/expect

#
#Test program to test SPORT UART1.
#Be sure the serial cable is connected to sport uart1 from the host ttyS0.
#And  the kernel is booted up with eth0 enabled.
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
set bootargs             $bootargs_param7
source ../reboot_kernel.exp

send_log "\nStarting test for Serial UART 1...\n"

set ttyBFdev /dev/ttyBF1
set file a

set argc [llength $argv]
if { $argc > 0 } {
set ttyBFdev             [lindex $argv 0]
}

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"

set case_num 0

incr case_num
set timeout 5

send "\r"
expect -re  $kernel_prompt

send -s "stty -F $ttyBFdev ispeed $baud_rate ospeed $baud_rate \r"
while 1 {
        expect {
                -re  "$kernel_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}
send -s "cat $ttyBFdev  \r"
while 1 {
        expect {
                -re  "$kernel_prompt" {
                      break }
                timeout {
                      break }
        }
}

set target_id $spawn_id

spawn /bin/sh
set host_sh_id $spawn_id
expect  -re  $sh_prompt

send -s "stty -F $ttyUSBdev ispeed $baud_rate ospeed $baud_rate -icrnl \r"
while 1 {
        expect {
                -re  "$sh_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}

while 1 {
send -s "echo $STRDATA > $ttyUSBdev  \r"
expect {
        -re  "$sh_prompt" { 
          break }
         timeout {
          puts " send data failed...\n"
          break
         }
}
}

set spawn_id $target_id
send "\r"
while 1 {
expect {
        "$STRDATA" {
          case_pass $case_num
          send "\3"
          expect -re "$kernel_prompt"
          send_log "Echoed char get on host ." 
          break }
          timeout {
          send "\3"
          expect -re "$kernel_prompt"
          case_fail $case_num
          break
         }
}
}

incr case_num

set spawn_id $target_id
send -s "stty -F $ttyBFdev ispeed $baud_rate ospeed $baud_rate \r"
while 1 {
        expect {
                -re  "$kernel_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}
set spawn_id $host_sh_id
sleep 3
send "ls\r"
expect -re  "$sh_prompt"

send -s "stty -F $ttyUSBdev ispeed $baud_rate ospeed $baud_rate -icrnl \r"
while 1 {
        expect {
                -re  "$sh_prompt" { break  }
                timeout {
                     send_user "Failed to set uart speed.\n"
                     exit }
        }
}

while 1 {
send -s "cat $ttyUSBdev > $file \r"
expect {
        -re  "$sh_prompt" {
          puts "Fail to cat on host.\n"
          break }
         timeout {
          puts "wait for receiving data...\n"
          break
         }
}
}

set spawn_id $target_id
set timeout 10
while 1 {
send -s "cat /etc/boa.conf > $ttyBFdev \r"
        expect {
              -re  "$kernel_prompt" {
                      break }
                timeout { send_user "Failed inital telnet\n"
                        exit }
        }

}
set spawn_id $host_sh_id
sleep 5
while 1 {
expect {
        -re  "$sh_prompt" {
          puts "Fail to wait.\n"
          break }
         timeout {
          puts "\nStill wait.\n"
          break
         }
}
}
send -s "\3"
while 1 {
expect {
        -re  "$sh_prompt" {
          break }
         timeout {
          puts "Failed to come out.\n"
          break
         }
}
}
send -s "cat $file \r"
while 1 {
expect {
       -re  "$sh_prompt" {
         break}
        timeout {
         puts "Failed to cat file.\n"}
}
}
send -s "dos2unix $file \r"
while 1 {
expect {
       "converting file" {
          puts "convert file.\n"
         break}
        timeout {
         puts "Failed to convert file.\n"}
}
}
expect {
       -re  "$sh_prompt" {
          puts "finish dos2unix.\n"
        }
}

send -s "rcp root@$targetip:/etc/boa.conf . \r"
while 1 {
expect {
       -re  "$sh_prompt" {
         puts "Copy file.\n"
         break}
        timeout {
         puts "Failed to copy file.\n"}
}
}

send -s "diff -u $file boa.conf \r"
while 1 {
expect {
          -re "\\\+\\\+\\\+.*\[\r\n]$sh_prompt" {
                         puts "\nTwo files diffs.\n $expect_out(0,string)\n"
                         case_fail $case_num
                         }
          -re  "$sh_prompt" 
                      {
                        puts "Success case.\n"
                        case_pass $case_num
                        break
                        }   
          "differ"
                      {
                         puts "Two files diffs!\n"
                         case_fail $case_num
                        }

          timeout 
                      {
                         puts "Fail to diff.\n"
                         case_fail $case_num
                        }   
         }
}

step "Convert the console to ttyBF1."

set spawn_id $target_id
set console [file tail /dev/ttyBF1]
append bootargs_param7 " console=$console"
set bootargs             $bootargs_param7
source ../reboot_kernel.exp

set timeout 3
incr case_num

    send -s "\x81"
    send -s "c"
    while 1 {
        expect {
            "ermit>" {
                send -s "q\r"
                expect -re ">"
                set back_flag SUCCESS
                break
            }

            timeout {
                send_user "ERROR: back to kermit error\n"
                break
            }
        }
    }

set ttydev $ttyUSBdev
step "Start kermit."
source ../spawn_kermit.exp
set timeout 20

    send -s "\r"
    expect -re "$kernel_prompt"
    send -s "ls\r"
    while 1 {
        expect {
            -re "$kernel_prompt" {
                case_pass $case_num
                break
            }

            timeout {
                case_fail $case_num
                send_user "The console is not active.\n"
                exit
            }
        }
}



send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file

