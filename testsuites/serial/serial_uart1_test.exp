#!/usr/bin/expect

#
#Test program to test UART1.
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

send_log "\nStarting test for serial UART 1...\n"

set STRDATA "abcdefghijklmnopqrstuvwxyz0123456789"

set argc [llength $argv]
if { $argc < 2} {
   puts "Usage:  $argv0 tty-device0 tty-device1"
   puts "   where tty-device is something like /dev/ttyS0"
   puts "   where tty-device0 is for UART0 and tty-device1 is for UART1"
   puts ""
   exit
}
# grab the user specified parameters.
set ttydev             [lindex $argv 0]

# Set up $ttydev0 to do configuration in u-boot.
#

set step_sequence_number    1

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

send_log "***********************************\r"
send_log "Try to communicate board with UART1\r"
send_log "***********************************\r"
send -s "\034"
set timeout 2
while 1 {
   expect {
      "ermit>" {
         send_log "disconnect /dev/ttyS0\n"
         break
      }
      timeout {
         send_log "disconnect /dev/ttyS0 timeout\n"
         exit
      }
   }
}


send -s "set line $ttydev1\r"
while 1 {
   expect {
      "ermit>" {
         send_log "set line to $ttydev1\n"
         break
      }
      timeout {
         send_log "set line to $ttydev1 timeout\n"
         exit
      }
   }
}

send -s "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     puts "\nERROR: Can't connect to serial port $ttydev1\n"
		     exit }
	}
}

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"

set case_num 0

incr case_num
set timeout 30
send -s "$STRDATA\r"
while 1 {
   expect {
	"> " {
		send_log "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "\3"
   expect {
	"> " {
		send_log "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "ls\r"
   expect {
	"> " {
		send_log "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "dmesg\r"
   send -s "dmesg\r"
   send -s "dmesg\r"
   send -s "cat proc/slabinfo\r"
   expect {
	"slabinfo - version" {
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   expect {
	"> " {
		send_log "\rCase $case_num ...PASS\r"
		break
	}
         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "cat proc/kallsyms\r"
   expect {
	"start" {
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   sleep 1
   send -s "\3"
   expect {
	"> " {
		send_log "\rCase $case_num ...PASS\r"
		break
	}
         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}


incr case_num
set timeout 30
for {set i 0} {$i<100} {incr i} {
   send "$STRDATA\r"
}
send -s "====================================\r"

while 1 {
   expect {
	"=========: not found" {
		send_log "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

incr case_num
while 1 {
   set timeout 5
   send -s "vi\r"
   expect {
	"line 1 of 1" {
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

while 1 {
   set timeout 30
   send -s "i"
   send -s "adskf\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   send -s "werigji\r"
   for {set i 0} {$i<100} {incr i} {
      send -s "x"
      expect {
	"x" {
	}
         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
      }
   }
   send -s "a\r"
   send -s "b\r"
   send -s "c\r"
   send -s "d\r"
   send -s "e\r"
   send -s "f\r"
   send -s "\r"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA"
   send -s "$STRDATA\r"
   for {set i 0} {$i<100} {incr i} {
      send "$STRDATA\r"
   }
   send -s "===================================#"
   expect {
	"#" {
		sleep 2
		send -s "\033"
		sleep 2
		send -s ":q!\r"
		sleep 2
		send -s "\r"
		send_log "\rCase $case_num ...PASS\r"
		break
	}

         timeout {
		send_log "\rCase $case_num ...FAIL\r"
		send_log "$TITLE ............\[FAIL\]\r"
		exit
         }
   }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file

