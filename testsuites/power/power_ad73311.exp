#!/usr/bin/expect

source  ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

proc standby_test_case1 {} {
    global case_num

    set timeout 30
    incr case_num
    send "echo 'standby' > /sys/power/state\r"
    while 1 {
        expect {
            -re "Stopping tasks \.\.\. done\.\r\nSuspending console\\\(s\\\)\r\nRestarting tasks \.\.\. done\.\r\nroot:~>" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    set timeout 10
    send "tone\r"
    while 1 {
        expect {
            -re "TONE: generating sine wave at 1000 Hz\.\.\." {
                sleep 3
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    set timeout 15
    incr case_num
    send -s "\3"
    while 1 {
        expect {
            -re "root:~>" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}

proc standby_test_case2 {} {
    global case_num

    set timeout 30
    incr case_num
    send "echo 'standby' > /sys/power/state\r"
    while 1 {
        expect {
            -re "Stopping tasks \.\.\. done\.\r\nSuspending console\\\(s\\\)\r\nRestarting tasks \.\.\. done\.\r\nroot:~>" {
                case_pass $case_num
                break
            }
            timeout {
                case_fail $case_num
            }
        }
    }

    incr case_num
    send "ps ax|grep tone|awk \'\$5==\"tone\" {print \$1}\'\r"
    while 1 {
        expect {
            -re "\[0-9]+\r\nroot:~>" {
                case_pass $case_num
                break
            }
            -re "root:~>" {
                case_fail $case_num
            }
            timeout {
                case_fail $case_num
            }
        }
    }
}


step "Start testing"
set case_num 0
set Total_Count 5
sleep 5
send "\r"

set timeout 20
incr case_num
send "modprobe snd-ad73311\r"
while 1 {
    expect {
        -re "root:~>" {
            break
        }
        timeout {
            send_user "Install AD73311 module failed!\r"
            case_fail $case_num
        }
    }
}
send "lsmod\r" 
while 1 {
    expect {
        -re "snd_ad73311.*>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

incr case_num
set timeout 10
send "tone\r"
while 1 {
    expect {
        -re "TONE: generating sine wave at 1000 Hz\.\.\." {
            sleep 3
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 15
incr case_num
send -s "\3"
while 1 {
    expect {
        "root:~>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/mounts\r"
while 1 {
    expect {
        -re "sysfs /sys sysfs rw 0 0.*>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "ls /sys/power\r"
while 1 {
    expect {
        -re "state.*>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

for {set count 1} {$count <= $Total_Count} {incr count} {
    standby_test_case1
    send_user "\nStandby test case 1 round $count pass\n\n"
}

set timeout 15
incr case_num
send "tone &\n"
while 1 {
    expect {
        -re "\[0-9]+\r\nroot:~>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

sleep 3
for {set count 1} {$count <= $Total_Count} {incr count} {
    standby_test_case2
    send_user "\nStandby test case 2 round $count pass\n\n"
    sleep 3
}

set timeout 20
incr case_num
send "audio_test_id=\`ps ax|grep tone|awk \'\$5==\"tone\" {print \$1}\'\`; kill \$audio_test_id\r"
while 1 {
    expect {
        -re "kill:.*>|Usage:.*>" {
            case_fail $case_num
        }
        -re "root:~>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 20
incr case_num
send "rmmod snd-ad73311\r"
while 1 {
    expect {
        -re "rmmod:.*>" {
            case_fail $case_num
        }
        -re "root:~>" {
            case_pass $case_num
            break
        }
        timeout {
            case_fail $case_num
        }
    }
}

set timeout 20
incr case_num
send "lsmod\r" 
while 1 {
    expect {
        ">" {
            case_pass $case_num
            break
        }
        -re "snd_ad73311" {
            case_fail $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n" 

send_user "Ending $argv0\n"

log_file
