#!/usr/bin/expect --

#
# Build Kernel for power test
#

source  ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites
step "Make default config."
source  make_default_config.exp

step "Make config"
cd $uclinux_path
set timeout 300
spawn make config

while 1 {
    expect {
          -re  "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
                send "$expect_out(1,string)\r"
          }
           -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" { 
            send "y\r"
        }

           -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {   
            send "y\r"
        }

#Power Management
        -re "Power Management support \\\(PM\\\) \\\[.*]" {
            send "y\r"
        }

        -re "Select PM Wakeup Event Source.*Cause Wakeup Event by GPIO.*PM_WAKEUP_BY_GPIO.*choice\\\[.*]:" {
            if { $board_type == "BF548-EZKIT" } {
                #Specify Wakeup Event by SIC_IWR value
                send "1\r"
            } else {
                #Cause Wakeup Event by GPIO
                send "2\r"
            }
        }

        -re "Wakeup GPIO number.*PM_WAKEUP_GPIO_NUMBER.*\\\[.*]" {
            #If Wakeup Event is by GPIO, set GPIO NO. to 2 (for PB1); sw5.1 set to OFF on board
            send "2\r"
        }

#Video Output.
        -re "SPI controller driver for ADI Blackfin5xx.*SPI_BFIN.*\\\[.*]" {
            send "m\r"
        }

        -re "Backlight & LCD device support.*BACKLIGHT_LCD_SUPPORT.*\\\[.*]" {
            send "y\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send "y\r"
        }

        -re "SHARP LQ035 TFT LCD on uClinux.*BF537 STAMP.*FB_BF537_LQ035.*\\\[.*]" {
            send "m\r"
        }

        -re "SHARP LQ043 TFT LCD.*BF548 EZKIT.*\\\[.*]" {
            send "m\r"
        }

        -re "Blackfin ADI7171 video encoder on uClinux.*FB_BFIN_7171.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "m\r"
            } else {
                send "n\r"
            }
        }

        -re "Blackfin ADV7393 Video encoder on uClinux.*FB_BFIN_7393.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "m\r"
            } else {
                send "n\r"
            }
        }

#Audio Output
        -re "Sound card support.*SOUND.*\\\[.*]" {
            send "y\r"
        }

        -re "Advanced Linux Sound Architecture.*SND.*\\\[.*]" {
            send "y\r"
        }

        -re "Sequencer support.*SND_SEQUENCER.*\\\[.*]" {
            send "y\r"
        }

        -re "OSS Mixer API.*SND_MIXER_OSS.*\\\[.*]" {
            send "y\r"
        }

        -re "OSS PCM .*digital audio.* API .*SND_PCM_OSS\\\).*\\\[.*]" {
            send "y\r"
        }

        -re "AD1836 Audio support for BF53x.*SND_BLACKFIN_AD1836.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "m\r"
            } else {
                send "n\r"
            }
        }

        -re "AD73311L Audio support for BF53x.*SND_BFIN_AD73311.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                send "m\r"
            } else {
                send "n\r"
            }
        }

        -re "ALSA for SoC audio support.*SND_SOC.*\\\[.*]" {
            send "m\r"
        }

        -re "SoC Audio for the ADI BF5xx chip.*SND_BF5XX_SOC.*\\\[.*]" {
            send "m\r"
        }

        -re "SoC AC97 Audio support for BF5xx.*SND_BF5XX_SOC_BF5xx.*\\\[.*]" {
            send "m\r"
        }

        -re "3 Stereos .*SND_BLACKFIN_AD1836_MULSUB.*choice\\\[.*]" {
            send "1\r"
        }

        -re "Binary format.*FLAT.*Shared-FLAT.*FDPIC.*\\\[.*]" {
            send "4\r"
        }

        -re "ALSA utils.*CONFIG_USER_ALSA_UTILS.*\\\[.*]" {
            send "y\r"
        }

        -re "mp3play.*CONFIG_USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vplay.*CONFIG_USER_VPLAY_VPLAY.*\\\[.*]" {
            send "Y\r"
        }

        -re "vrec.*CONFIG_USER_VPLAY_VREC.*\\\[.*]" {
            send "Y\r"
        }

        -re "tone.*CONFIG_USER_PLAY_TONE.*\\\[.*]" {
            send "y\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
        }
    }
}

cd $uclinux_path/testsuites

step "Make kernel"

source   make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux image"

source   copy_image.exp

send_user "Ending $argv0\n"

log_file
