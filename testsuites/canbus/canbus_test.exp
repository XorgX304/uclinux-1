#!/usr/bin/expect
log_file canbus_test_log
send_user "Starting canbus_test.exp\n"

set user /home/test
set uclinux_path $user/checkouts/kernel/uClinux-dist
set dxe_filename linux
set ttydev /dev/ttyS0
set send_slow {1 0.1}
set password "blackfin"

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1


step "Start kermit"

#step "Start up kermit on port $ttydev"
# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 5
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   report "ERROR: Failed to start up kermit"
                   all_done
		}
		timeout {
                   report "ERROR: Time out starting up kermit"
                   all_done
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
   send [lindex $kparams $i]

   while 1 {
      expect {
         "ermit>" { break }

         "\\?\[A-Z]" {
            puts "ERROR: Failed to set up kermit parameters"
          #  all_done
         }

         timeout {
            puts "ERROR: Time out setting up kermit parameters"
           # all_done
         }
      }
   }
}

send "connect\r"
while 1 {
   expect {
      "ype the escape character*" {
         break
      }

      timeout {
         puts "\nERROR: Can't connect to serial port\n"
         exit
      }
   }
}

step "Restart the board."

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect ">"
	send_user "sending reboot\n"
	send "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {
         "Hit any key " {
	     send "\r"
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
             break
         }
      }
   }
	

send -s "set bootargs root=/dev/mtdblock0 rw\r"
expect ">"
send -s "save\r"
expect ">"

send -s "tftpboot 0x1000000 linux\r"
while 1 {
   expect {
      "#" {
         expect ">"
         break
      }

      timeout {
            puts "Fail tftp. "
            break
         }
     }
}

send -s "boote\r"
set timeout 180
   while 1 {
      expect {

         -re "Kernel panic" {
            report "kernel panic detected... trying to recover from it"
         #   recover
            break
         }

         -re "Sash command shell.*/> " {
            puts "successful boot attempt"
          #  incr successful_boots
            break
         }
	 
	  "root:~> " {
            puts "successful boot attempt"
          #  incr successful_boots
            break
         }

         -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
         }

         # Look for gcc version N.N[.N[.N]]
         -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
         }

         # Look for text followed by 1 or more spaces or tabs
         # followed by = followed by 1 or more spaces or tabs
         # followed by (0xNNNNNN-0xNNNNNN)
         -re "text\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_text $expect_out(1,string)
         }

         -re "data\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_data $expect_out(1,string)
         }

         -re "bss\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_bss $expect_out(1,string)
         }
         -re "rootfs\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_rootfs $expect_out(1,string)
         }

         # Note that here we're looking for zero or 1 space. Doh!
         -re "stack\[\x20\t]?=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_stack $expect_out(1,string)
         }

         -re "\[Ii]nstruction \[Cc]ache \[Ee]nabled" {
           # set instruction_cache_boot_flag $CACHE_ENABLED
         }

         -re "\[Ii]nstruction \[Cc]ache \[Dd]isabled" {
           # set instruction_cache_boot_flag $CACHE_DISABLED
         }

         -re "\[Dd]ata \[Cc]ache \[Ee]nabled" {
           # set data_cache_boot_flag $CACHE_ENABLED
         }

         -re "\[Dd]ata \[Cc]ache \[Dd]isabled" {
            #set data_cache_boot_flag $CACHE_DISABLED
         }

         timeout {
            puts "failed boot attempt"
	 
            break
         }
      }
   }

sleep 5
send "\r"

step "Starting test."
set timeout 8
set flag 0

expect "root:~>"
send -s "modprobe can\r" 
while 1 {
   expect {
     -re "ISA-BlackFin-CAN CAN Driver" {
         
	 puts "module insert success.\n"
         break
      }

      timeout { 
         puts "module probe failed.\n"                  
         break
         }
     }
}
expect "root:~>"
send -s "lsmod\r" 
while 1 {
   expect {
      "can" {
         
	 puts "module ls success.\n"
         break
      }

      timeout { 
         puts "module ls failed.\n"                  
         break
         }
     }
}

expect "root:~>"
send -s "can_send 10 01 02 03 04 05 06 07 08\r" 
while 1 {
   sleep 3
   expect {
      "root:~>" { 
         break
      }

      timeout {                           
         break
         }
     }
}

expect "root:~>"
send -s "can_send 10 01 02 03 04 05 06 07 08\r" 
while 1 {
   sleep 3
   expect {
      "root:~>" { 
         break
      }

      timeout {                           
         break
         }
     }
}

send -s "receive\r" 
while 1 {
   expect {
     -re "Received with ret=1.*01 02 03 04 05 06 07.*Received with ret=1.*01 02 03 04 05 06 07" { 
   
         break
      }

      timeout {                           
         break
         }
     }
}


send -s "lsmod\r" 
while 1 {
   expect {
      "root:~>" {
         break
      }

      timeout { 
         puts "module ls failed.\n"                  
         break
         }
     }
}

log_file
 
send_user "Ending canbus_test.exp\n"

