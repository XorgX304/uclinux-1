#!/usr/bin/expect

#
#Test program to test the audio driver.
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"

proc oss_rec2_play2 {format_1 channel_1 rate_1 format_2 channel_2 rate_2} {
    global case_num

    if { $channel_1 == "Mono" } {
        set channel_type_1 ""
    } else {
        set channel_type_1 "-S"
    }

    if { $channel_2 == "Mono" } {
        set channel_type_2 ""
    } else {
        set channel_type_2 "-S"
    }

    incr case_num
    set timeout 15 
    send -s "vrec -w $channel_type_1 -b $format_1 -s $rate_1 -t 5 wav1; vrec -w $channel_type_2 -b $format_2 -s $rate_2 -t 5 wav2\n"
    expect {
        -re "$channel_1.*$channel_2 \.\.\.\r\n$kernel_prompt" {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "vplay wav1&\n"
    expect {
        "$channel_1 \.\.\.\r\n" {
            send "\n"
            expect ">"
        }
        timeout {
            case_fail $case_num
        }
    }

    sleep 1 
    send -s "vplay wav2\n"
    expect {
        -re "$channel_2 \.\.\.\r\n$kernel_prompt" {
            case_pass $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

proc oss_play_rec2play {format_1 channel_1 rate_1 format_2 channel_2 rate_2} {
    global case_num

    if { $channel_1 == "Mono" } {
        set channel_type_1 ""
    } else {
        set channel_type_1 "-S"
    }

    if { $channel_2 == "Mono" } {
        set channel_type_2 ""
    } else {
        set channel_type_2 "-S"
    }

    incr case_num
    set timeout 10
    send -s "vrec -w $channel_type_1 -b $format_1 -s $rate_1 -t 5 wav1\n"
    expect {
        -re "$channel_1 \.\.\.\r\n$kernel_prompt" {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "vplay wav1&\n"
    expect {
        "$channel_1 \.\.\.\r\n" {
            send "\n"
            expect ">"
        }
        timeout {
            case_fail $case_num
        }
    }

    sleep 1 
    send -s "vrec -w $channel_type_2 -b $format_2 -s $rate_2 -t 5 | vplay\n"
    expect {
        -re "$channel_2 \.\.\.\r\n$kernel_prompt" {
            case_pass $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

proc alsa_rec2_play2 {format_1 channel_1 rate_1 format_2 channel_2 rate_2} {
    global case_num

    if { $channel_1 == "Mono" } {
        set channel_num_1 "1"
    } else {
        set channel_num_1 "2"
    }

    if { $channel_2 == "Mono" } {
        set channel_num_2 "1"
    } else {
        set channel_num_2 "2"
    }

    incr case_num
    set timeout 15
    send -s "arecord -t wav -c $channel_num_1 -f $format_1 -r $rate_1 -d 5 wav1; arecord -t wav -c $channel_num_2 -f $format_2 -r $rate_2 -d 5 wav2\n"
    expect {
        -re "$channel_1.*$channel_2\r\n$kernel_prompt" {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "aplay wav1&\n"
    expect {
        "$channel_1\r\n" {
            send "\n"
            expect ">"
        }
        timeout {
            case_fail $case_num
        }
    }

    sleep 1 
    send -s "aplay wav2\n"
    expect {
        -re "$channel_2\r\n$kernel_prompt" {
            case_pass $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

proc alsa_play_rec2play {format_1 channel_1 rate_1 format_2 channel_2 rate_2} {
    global case_num

    if { $channel_1 == "Mono" } {
        set channel_num_1 "1"
    } else {
        set channel_num_1 "2"
    }

    if { $channel_2 == "Mono" } {
        set channel_num_2 "1"
    } else {
        set channel_num_2 "2"
    }

    incr case_num
    set timeout 10
    send -s "arecord -t wav -c $channel_num_1 -f $format_1 -r $rate_1 -d 5 wav1\n"
    expect {
        -re "$channel_1\r\n$kernel_prompt" {}
        timeout {
            case_fail $case_num
        }
    }

    send -s "aplay wav1&\n"
    expect {
        "$channel_1\r\n" {
            send "\n"
            expect ">"
        }
        timeout {
            case_fail $case_num
        }
    }

    sleep 1 
    send -s "arecord -t wav -c $channel_num_2 -f $format_2 -r $rate_2 -d 5 | aplay\n"
    expect {
        -re "$channel_2\r\n$kernel_prompt" {
            case_pass $case_num
        }
        timeout {
            case_fail $case_num
        }
    }
}

spawn mpg123 -Z ./audiotest.mp3
set plaympeg_id $spawn_id
set spawn_id $kermit_spawn_id 
set case_num 0
send_log "\nPlease listen to the earphone or amplifier.\n\n"

sleep 3

set timeout 4
send "\n"
expect	"> "

while 1 {
    oss_rec2_play2  8 Stereo 44100   16 Stereo  8000
    oss_rec2_play2 16 Stereo 44100    8 Stereo  8000
    oss_rec2_play2  8   Mono  8000   16 Stereo  8000
    oss_rec2_play2 16   Mono  8000    8 Stereo  8000
    oss_rec2_play2  8   Mono 44100   16 Stereo 44100
    oss_rec2_play2 16   Mono 44100    8 Stereo 44100
    oss_rec2_play2  8   Mono 44100   16   Mono  8000
    oss_rec2_play2 16   Mono 44100    8   Mono  8000

    oss_play_rec2play 16   Mono 44100    8   Mono  8000
    oss_play_rec2play  8   Mono  8000   16 Stereo  8000
    oss_play_rec2play  8   Mono 44100   16 Stereo 44100
    oss_play_rec2play  8   Mono 44100   16   Mono  8000

    sleep 5
    expect {
        "Input/output error" {
            case_fail $case_num
        }
        timeout {
            send_user "ALSA lib test finished\n"
            break
        }
    }
}

while 1 {
    alsa_rec2_play2     U8 Stereo 44100   S16_LE Stereo  8000
    alsa_rec2_play2 S16_LE Stereo 44100       U8 Stereo  8000
    alsa_rec2_play2     U8   Mono  8000   S16_LE Stereo  8000
    alsa_rec2_play2 S16_LE   Mono  8000       U8 Stereo  8000
    alsa_rec2_play2     U8   Mono 44100   S16_LE Stereo 44100
    alsa_rec2_play2 S16_LE   Mono 44100       U8 Stereo 44100
    alsa_rec2_play2     U8   Mono 44100   S16_LE   Mono  8000
    alsa_rec2_play2 S16_LE   Mono 44100       U8   Mono  8000

    alsa_play_rec2play S16_LE   Mono 44100       U8   Mono  8000
    alsa_play_rec2play     U8   Mono  8000   S16_LE Stereo  8000
    alsa_play_rec2play     U8   Mono 44100   S16_LE Stereo 44100
    alsa_play_rec2play     U8   Mono 44100   S16_LE   Mono  8000 

    sleep 5
    expect {
        "Input/output error" {
            case_fail $case_num
        }
        timeout {
            send_user "OSS lib test finished\n"
            break
        }
    }
}

set spawn_id $plaympeg_id
send "\3\3"
sleep 1

send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file
