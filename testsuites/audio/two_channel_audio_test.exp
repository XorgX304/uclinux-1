#!/usr/bin/expect
#
#Test program to test the audio driver.
#

log_file two_channel_audio_test_log
send_user "Starting two_channel_audio_test.exp\n"

set SERIAL_PORT_BAUD_RATE   "57600"
set TITLE "Audio Test"
set dxe_filename linux
set ttydev /dev/ttyS0
set send_slow {1 0.1}
set password "blackfin"

set argc [llength $argv]
if { $argc < 1} {
   puts "Usage:  $argv0 tty-device"
   puts "   where tty-device is something like /dev/ttyS0"
   puts ""
   exit
}
# grab the user specified parameters.
set ttydev             [lindex $argv 0]

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

step "Start kermit"

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed $SERIAL_PORT_BAUD_RATE\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
set nkparams [llength $kparams]

set timeout 3
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   tee "ERROR: Failed to start up kermit"
                   exit
		}
		timeout {
                   tee "ERROR: Time out starting up kermit"
                   exit
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send -s [lindex $kparams $i]

    while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                    tee "ERROR: Failed to set up kermit parameters"
                    exit
		 }

		 timeout {
                    tee "ERROR: Time out setting up kermit parameters"
                    exit
		 }
	  }
    }
}

send -s "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     puts "\nERROR: Can't connect to serial port\n"
		     exit }
	}
}
#
#  Ok, Kermit is running and connected to the board.
#

step "Restart the board."

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect ">"
	send_user "sending reboot\n"
	send "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {
         "Hit any key " {
	     send "\r"
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
             break
         }
      }
   }
	

send -s "set bootargs root=/dev/mtdblock0 rw\r"
expect ">"
send -s "save\r"
expect ">"


set timeout 2
set flag 0
send -s "tftp 0x1000000 linux\r"
while 1 {
   expect {
      "TFTP" {
         set flag 1
         set timeout 30
      }
      ">" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 1
set flag 0
send -s "bootelf\r"
while 1 {
   expect {
      "Loading .text" {
         set flag 1
         set timeout 3
      }
      "Linux version" {
         break
      }
   }
}
if {$flag==0} {
   puts "fail to communicate with uboot.\n"
   exit
}

set timeout 30
while 1 {
   expect {
	"> " {
		break
	}

         timeout {
		puts "fail to communicate with kernel.\n"
		exit
         }
   }
}

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"

spawn plaympeg -l audiotest.mp3
set plaympeg_id $spawn_id

set spawn_id $kermit_spawn_id 

set case_num 0

send_log "\nPlease listen to the earphone or amplifier.\n\n"

sleep 3

set timeout 4
send "cd /var\n"
expect	"> "

while 1 {
   set timeout 15 
   incr case_num
   send -s "vrec -w -S -b 8 -s 44100 -t 6 a; vrec -w -S -b 16 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -S -b 16 -s 44100 -t 6 a; vrec -w -S -b 8 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 8000 -t 6 a; vrec -w -S -b 16 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 16 -s 8000 -t 6 a; vrec -w -S -b 8 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 44100 -t 6 a; vrec -w -S -b 16 -s 44100 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 16 -s 44100 -t 6 a; vrec -w -S -b 8 -s 44100 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 44100 -t 6 a; vrec -w -b 16 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 16 -s 44100 -t 6 a; vrec -w -b 8 -s 8000 -t 6 b\n"
   expect "> "
   send -s "vplay a&\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
		exit
	    }
	}
   sleep 1 
   send -s "vplay b\n"
   expect {
	"> " {

		send_log "\nCase $case_num ...DONE\n"
	}
	

         timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   set timeout 10
   incr case_num
   send -s "vrec -w -b 16 -s 44100 -t 6 a\n"
   expect { 
   	"> " {}
   	    timeout {
	    	send_log "\nCase $case_num ...FAIL\n"
	    }
   }
   send -s "vplay a &\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
	}
   }

   sleep 1 
   send -s "vrec -w -b 8 -s 8000 -t 6 | vplay\n"
   expect {
	"> " {
		send_log "\nCase $case_num ...DONE\n"
	}
        timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 8000 -t 6 a\n"
   expect { 
   	"> " {}
   	    timeout {
	    	send_log "\nCase $case_num ...FAIL\n"
	    }
   }
   send -s "vplay a &\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
	}
   }

   sleep 1 
   send -s "vrec -w -S -b 16 -s 8000 -t 6 | vplay\n"
   expect {
	"> " {
		send_log "\nCase $case_num ...DONE\n"
	}
        timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 44100 -t 6 a\n"
   expect { 
   	"> " {}
   	    timeout {
	    	send_log "\nCase $case_num ...FAIL\n"
	    }
   }
   send -s "vplay a &\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
	}
   }

   sleep 1 
   send -s "vrec -w -S -b 16 -s 44100 -t 6 | vplay\n"
   expect {
	"> " {
		send_log "\nCase $case_num ...DONE\n"
	}
        timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 8 -s 44100 -t 6 a\n"
   expect { 
   	"> " {}
   	    timeout {
	    	send_log "\nCase $case_num ...FAIL\n"
	    }
   }
   send -s "vplay a &\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
	}
   }

   sleep 1 
   send -s "vrec -w -b 16 -s 8000 -t 6 | vplay\n"
   expect {
	"> " {
		send_log "\nCase $case_num ...DONE\n"
	}
        timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "$TITLE ............\[FAIL\]\n"
		exit
         }
   }

   incr case_num
   send -s "vrec -w -b 16 -s 44100 -t 6 a\n"
   expect { 
   	"> " {}
   	    timeout {
	    	send_log "\nCase $case_num ...FAIL\n"
	    }
   }
   send -s "vplay a &\n"
   expect { 
   	"> " {}
	timeout {
		send_log "\nCase $case_num ...FAIL\n"
	}
   }

   sleep 1 
   send -s "vrec -w -b 8 -s 8000 -t 6 | vplay\n"
   expect {
	"> " {
		send_log "\nCase $case_num ...DONE\n"
	}
        timeout {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "\n$TITLE ............\[FAIL\]\n"
		exit
         }
   }


   sleep 5
   expect {
	"Input/output error" {
		send_log "\nCase $case_num ...FAIL\n"
		send_log "\n$TITLE ............\[FAIL\]\n"
		exit
	}
	
	timeout {
		send_log "Finished\n"
		break;

	}
   }

}

set spawn_id $plaympeg_id
send "\3"
sleep 1

send_log "\n$TITLE ............DONE\n"

log_file
 
send_user "\nEnding two_channel_audio_test.exp\n"
