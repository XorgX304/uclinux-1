#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	        
	     send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             send "y\r"
      }

          
          -re "Compiled-in Kernel Boot Parameter.*BOOTPARAM.*\\\[.*]" {
            
             send "N\r"
      }

          -re "Initial RAM filesystem and RAM disk.*initramfs/initrd.*support.*BLK_DEV_INITRD.*\\\[.*]" {
             send "Y\r"
      }
 
 
        -re "Memory Technology Device .*MTD.* support.*MTD.*\\\[.*]" {
             
             send -s "Y\r"
      }
      
        -re "MTD partitioning support.*MTD_PARTITIONS.*\\\[.*]" {
             
             send  -s "Y\r"
      }
      
       -re "Direct char device access to MTD devices.*MTD_CHAR.*\\\[.*]" {
             
             send  -s "Y\r"
      }
      
         -re "Caching block device access to MTD devices.*MTD_BLOCK.*\\\[.*]" {
             
             send  -s "Y\r"
      }
      
        -re "Detect non-CFI AMD/JEDEC-compatible flash chips.*MTD_JEDECPROBE.*\\\[.*]" {
             
             send  -s "Y\r"
      }

       -re "Flash chip driver advanced configuration options.*MTD_CFI_ADV_OPTIONS.*\\\[.*]" {
            if { $board_type == "BF537-STAMP"  || $board_type == "BF533-STAMP" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

         -re "Detect flash chips by Common Flash Interface.*CFI.*probe.*MTD_CFI.*\\\[.*]" {
            if { $board_type == "BF561-EZKIT" || $board_type == "BF548-EZKIT" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

         -re "ST MW320D compatible flash chip support.*MTD_MW320D.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

         -re "Support for AMD/Fujitsu flash chips.*MTD_CFI_AMDSTD.*\\\[.*]" {
            if { $board_type == "BF561-EZKIT" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

       -re "Support for Intel/Sharp flash chips.*MTD_CFI_INTELEXT.*\\\[.*]" {

             if { $board_type == "BF548-EZKIT" } {
                send -s "Y\r"
             } else {
                send -s "N\r"
             }
      }

         -re "Support for RAM chips in bus mapping.*MTD_RAM.*\\\[.*]" {

             send -s "Y\r"
      }

         -re "Support for ROM chips in bus mapping.*MTD_ROM.*\\\[.*]" {

             send -s "Y\r"
      }

         -re "Blackfin BF561 EZKIT Flash Chip Support.*MTD_EZKIT561.*\\\[.*]" {
            if { $board_type == "BF561-EZKIT" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

        -re "Support non-linear mappings of flash chips.*MTD_COMPLEX_MAPPINGS.*\\\[.*]" {
            if { $board_type == "BF537-STAMP"  || $board_type == "BF533-STAMP" } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

        -re "Blackfin BF5xx Flash Chip Support.*MTD_BF5xx.*\\\[.*]" {
            if { $board_type == "BF537-STAMP" || $board_type == "BF533-STAMP"  } {
                       send "Y\r"
            } else {
                       send "N\r"
            }
      }

       -re "CFI Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {

             if { $board_type == "BF548-EZKIT" } {
                send -s "Y\r"
             } else {
                send -s "N\r"
             }
      }

       -re "Physical length of flash mapping.*MTD_PHYSMAP_LEN.*\\\[.*]" {

             if { $board_type == "BF548-EZKIT" } {
                send -s "0x600000\r"
             }
      }


       -re "Generic uClinux RAM/ROM filesystem support.*MTD_UCLINUX.*\\\[.*]" {
             
             send -s "N\r"
      }
      
       -re "Journalling Flash File System v2.*JFFS2.*support.*JFFS2_FS.*\\\[.*]" {

             send  -s "Y\r"
      }

         -re "Support for frame buffer devices.*FB.*\\\[.*]" {
             send -s  "N\r"
      }
      
       	   -re "Sound card support.*SOUND.*\\\[.*]" {
             send  -s "N\r"
      }
      
    ####################################################################
    ####################################################################
    
      
           -re "mtd-utils.*CONFIG_USER_MTDUTILS.*\\\[.*]" {
             
             send  -s "Y\r"
      }
      
          -re "eraseall.*CONFIG_USER_MTDUTILS_ERASEALL.*\\\[.*]" {
             
             send  -s  "Y\r"
      }
      
          -re "mkfs.jff2.*CONFIG_USER_MTDUTILS_MKFSJFFS2.*\\\[.*]" {
             
             send  -s "Y\r"
      }
      
 	      
           -re "Build libZ.*CONFIG_LIB_ZLIB_FORCE.*\\\[.*]" {
             send "N\r"
      }
      
       	  -re "Build libpng.*CONFIG_LIB_LIBPNG_FORCE.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "Build libjpeg.*CONFIG_LIB_LIBJPEG_FORCE.*\\\[.*]" {
             send "N\r"
      }
     
      	  -re "Build ncurses.*CONFIG_LIB_NCURSES_FORCE.*\\\[.*]" {
             send "N\r"
      }
      
         -re "boa-new.*CONFIG_USER_BOA_SRC_BOA_NEW.*\\\[.*]" {
             send "N\r"
      }
	  
	  -re "dhrystone.*CONFIG_USER_DHRYSTONE_DHRYSTONE.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "whetstone.*CONFIG_USER_WHETSTONE_WHETSTONE.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "Sqlite.*a light weight database.*CONFIG_USER_SQLITE.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "VIDEO test program.*CONFIG_USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "TWI LCD test program.*CONFIG_USER_BLACKFIN_TWILCDTEST.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "netperf test tool.*CONFIG_USER_NETPERF_TEST.*\\\[.*]" {
             send "N\r"
      }

      	  -re "strace.*CONFIG_USER_BLACKFIN_STRACE.*\\\[.*]" {
             send "N\r"
      }
      
      	  -re "jpegview.*CONFIG_USER_JPEGVIEW.*\\\[.*]" {
             send "N\r"
      }
           
       "\\\(*) \\\[*]" {
             sleep .001
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }


      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
           
      }
   }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp
  
send_user "Ending $argv0\n"
log_file



