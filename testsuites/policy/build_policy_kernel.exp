#!/usr/bin/expect

source  ../kernel_config.exp
source  ../board_info.exp

log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	        
	     send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             
             send "y\r"
      }
      
        -re "CPU.*BF531.*BF532.*BF533.*BF534.*BF535.*BF536.*BF537.*BF561.*choice.*\\\[.*]" {
 	    if { $cpu == "BF531" } {
                       send "1\r"
            } elseif { $cpu == "BF532" } {
                       send "2\r"
            } elseif { $cpu == "BF533" } {
                       send "3\r"
            } elseif { $cpu == "BF534" } {
                       send "4\r"
            } elseif { $cpu == "BF535" } {
                       send "5\r"
            } elseif { $cpu == "BF536" } {
                       send "6\r"
            } elseif { $cpu == "BF537" } {
                       send "7\r"
            } elseif { $cpu == "BF561" } {
                       send "8\r"
            }
      }   
      
           -re "Use full SLAB allocator.*SLAB.*\\\[.*]" {
	    if { $allocator == "slab\(p2\)" } {
                       send "Y\r"		       
            } elseif { $allocator == "slab\(np2\)" } {
                       send "Y\r"
            } elseif { $allocator == "slob\(p2\)" } {
                       send "N\r"
            } elseif { $allocator == "slob\(np2\)" } {
                       send "N\r"
            }
      }
      
           -re "Page frame management algorithm.*Buddy system algorithm.*Non-power of 2 algorithm.*choice.*\\\[.*]" {
 	    if { $allocator == "slab\(p2\)" } {
                       send "1\r"
            } elseif { $allocator == "slab\(np2\)" } {
                       send "2\r"
            } elseif { $allocator == "slob\(p2\)" } {
                       send "1\r"
            } elseif { $allocator == "slob\(np2\)" } {
                       send "2\r"
            }
      }
            
          -re "Kernel support for FDPIC ELF binaries.*BINFMT_ELF_FDPIC.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send  "Y\r"
		} elseif { $binary_format == "flat" } {
			send  "\r"
		} elseif { $binary_format == "shared-flat" } {
                       send  "\r"
            }	
      }
      
          -re "Kernel support for flat binaries.*BINFMT_FLAT.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send "\r"
		} elseif { $binary_format == "flat" } {
			send "Y\r"
		} elseif { $binary_format == "shared-flat" } {
                       send  "\r"
            }	
      }
      
          -re "Enable shared FLAT support.*BINFMT_SHARED_FLAT.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send "\r"
		} elseif { $binary_format == "flat" } {
			send  "\r"
		} elseif { $binary_format == "shared-flat" } {
                       send  "Y\r"
            }	
      }
    
          -re "Binary format.*FLAT, Shared-FLAT, FDPIC.*\\\[.*]" {
            if { $binary_format == "flat" } {
                       send  "FLAT\r"
            } elseif { $binary_format == "elf" } {
                       send  "FDPIC\r"
                       sleep 1 
            } elseif { $binary_format == "shared-flat" } {
                       send  "Shared-FLAT\r"
            }
      }
      
           -re "Install ELF shared libraries.*CONFIG_INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {
            if { $binary_format == "flat" } {
                       send  "N\r"
            } elseif { $binary_format == "elf" } {
                       send  "\r"
            } elseif { $binary_format == "shared-flat" } {
                       send  "\r"
            }
      }

           -re "Install FLAT shared libraries.*CONFIG_INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {

                       send  "\r"
      }
 
           -re "Enable ICACHE.*BLKFIN_CACHE.*\\\[.*]" {
		if { $icache == "on" } {
			send "Y\r"
		} elseif { $icache == "off" } {
			send "N\r"
		}
         }
      
	   -re "Enable DCACHE.*BLKFIN_DCACHE.*\\\[.*]" {
		if { $dcache == "on" } {
			send "Y\r"
		} elseif { $dcache == "off" } {
			send "N\r"
		}
         }
	 
           -re "Policy.*Write back.*BLKFIN_WB.*Write through.*BLKFIN_WT.*choice.*\\\[.*]" {
		if { $policy == "write_through" } {
			send "2\r"
		} elseif { $policy == "write_back" } {
			send "1\r"
		}
      }
      
           -re "Blackfin serial port support.*SERIAL_BFIN.*\\\[.*]" {
	  		
			send "Y\r"		
      }
      
           -re "Mode.*Blackfin UART DMA mode.*SERIAL_BFIN_DMA.*Blackfin UART PIO mode.*SERIAL_BFIN_PIO.*choice\\\[.*]" {
		if { $uart_mode == "dma" } {
			send "1\r"
		} elseif { $uart_mode == "pio" } {
			send "2\r"
		}
      }

           -re "Device Nodes.*Dynamic.*Static.*\\\[.*]" {

                        send "Static\r"
        }
 
       "\\\(*) \\\[*]" {
	    sleep .01 
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
             break
      }
   }
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp
 

send_user "Ending $argv0\n"
log_file
 


