#!/usr/bin/expect
log_file build_policy_kernel_log
send_user "Starting build_policy_kernel.exp\n"

set user /home/test
set uclinux_path $user/checkouts/kernel/uClinux-dist
set dxe_filename linux
set ttydev /dev/ttyS0
set send_slow {1 0.1}

set board_type [lindex $argv 0]
send_log "\n#### board_type is $board_type\n"

if { $argc < 1} {
puts "Please input: board_type."
exit
}
if { $argc >= 2} {
   set uclinux_path       [lindex $argv 1]
   send_log "\n#### uclinux_path is $uclinux_path\n"
}
if { $argc >= 3} {
   set binary_format         [lindex $argv 2]
   send_log "\n### binary_format is $binary_format\n"
}
if { $argc >= 4} {
   set policy             [lindex $argv 3]
   send_log "\n### policy is $policy\n"
}

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1


step "Make config."

cd $uclinux_path
set timeout 300
spawn make config


while 1 {
   expect {

       -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
             
             send "$board_type\r"
      }

      "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
              
      }
   }
}

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	        
	     send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             
             send "y\r"
      }
      
           -re "Binary format.*FLAT, Shared-FLAT, FDPIC.*\\\[.*]" {
              if { $binary_format == "flat" } {
                       send "FLAT\r"
            } elseif { $binary_format == "elf" } {
                       send "FDPIC\r"
            }
      }
      
           -re "Install ELF shared libraries.*CONFIG_INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {

             send "N\r"
      }

           -re "Install FLAT shared libraries.*CONFIG_INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {

             send "N\r"
      }
 

           -re "Write back.*BLKFIN_WB.*Write through.*BLKFIN_WT.*choice.*\\\[.*]" {
              if { $policy == "write_through" } {
                       send "2\r"
            } elseif { $policy == "write_back" } {
                       send "1\r"
            }
      }

      
       "\\\(*) \\\[*]" {
	     
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
        
      }
   }
}

step "Make uclibc config\n"

cd $uclinux_path/uClibc
set timeout 300
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
     -re "Target Architecture.*bfin.*TARGET_bfin.*bfinfdpic.*TARGET_bfinfdpic.*choice.*\\\[.*]" {
              if { $binary_format == "flat" } {
                       send "3\r"
            } elseif { $binary_format == "elf" } {
                       send "4\r"
            }
      }
       
     "\\\(*) \\\[*]" {
         send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
         send "\r"
      }

      eof {
         puts "End of uClibc configuration"
         break
      }

      timeout {
             puts "\n\nFATAL ERROR: config prompt timeout in uClibc make config"
         }
   }
}

step "Make"

cd $uclinux_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "Entering directory" { }
	     "Leaving directory" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"

}


step "Copy linux"
 
set timeout 8
cd $uclinux_path
exec cp images/linux  /tftpboot

log_file
 
send_user "Ending build_policy_kernel.exp\n"


