#!/usr/bin/expect
log_file build_policy_kernel_log
send_user "Starting build_policy_kernel.exp\n"

source  ../kernel_config.exp

set send_slow {1 .05}

set board_type     [lindex $argv 0]
send_log "\n#### board_type is $board_type\n"

set cpu            [lindex $argv 1]
send_log "\n#### cpu is $cpu\n"
   
if { $argc < 2} {
puts "Please input: board_type, cpu."
exit
}

set uclinux_path   /home/test/checkouts/kernel/uClinux-dist
set binary_format  flat
set allocator      slab\(p2\)
set icache	   on 
set dcache         on
set policy         write_through
set uart_mode      dma


if { $argc >= 3} {
   set uclinux_path        [lindex $argv 2]
   send_log "\n#### uclinux_path is $uclinux_path\n"
}
if { $argc >= 4} {
   set binary_format       [lindex $argv 3]
   send_log "\n### binary_format is $binary_format\n"
}
if { $argc >= 5} {
   set allocator           [lindex $argv 4]
   send_log "\n#### allocator is $allocator\n"
}
if { $argc >= 6} {
   set icache              [lindex $argv 5]
   send_log "\n#### icache is $icache\n"
}
if { $argc >= 7} {
   set dcache              [lindex $argv 6]
   send_log "\n#### dcache is $dcache\n"
}
if { $argc >= 8} {
   set policy              [lindex $argv 7]
   send_log "\n### policy is $policy\n"
}

if { $argc >= 9} {
   set uart_mode           [lindex $argv 8]
   send_log "\n#### uart_mode is $uart_mode\n"
}

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1


step "Make config."

cd $uclinux_path
set timeout 300
spawn make config


while 1 {
   expect {

       -re "Vendor.*AnalogDevices.*\\\[.*]" {

             send "AnalogDevices\r"
      }

       -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
             
             send "$board_type\r"
      }

      "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
             break 
      }
   }
}

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	        
	     send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             
             send "y\r"
      }
      
        -re "CPU.*BF531.*BF532.*BF533.*BF534.*BF535.*BF536.*BF537.*BF561.*choice.*\\\[.*]" {
 	    if { $cpu == "BF531" } {
                       send "1\r"
            } elseif { $cpu == "BF532" } {
                       send "2\r"
            } elseif { $cpu == "BF533" } {
                       send "3\r"
            } elseif { $cpu == "BF534" } {
                       send "4\r"
            } elseif { $cpu == "BF535" } {
                       send "5\r"
            } elseif { $cpu == "BF536" } {
                       send "6\r"
            } elseif { $cpu == "BF537" } {
                       send "7\r"
            } elseif { $cpu == "BF561" } {
                       send "8\r"
            }
      }   
      
           -re "Use full SLAB allocator.*SLAB.*\\\[.*]" {
	    if { $allocator == "slab\(p2\)" } {
                       send "Y\r"		       
            } elseif { $allocator == "slob\(p2\)" } {
                       send "N\r"
            } elseif { $allocator == "slob\(np2\)" } {
                       send "N\r"
            }
      }
      
           -re "Use non-power of 2 allocator.*NP2_ALLOC.*\\\[.*]" {
 	    if { $allocator == "slab\(p2\)" } {
                       send "\r"
            } elseif { $allocator == "slob\(p2\)" } {
                       send "N\r"
            } elseif { $allocator == "slob\(np2\)" } {
                       send "Y\r"
            }
      }
            
          -re "Kernel support for FDPIC ELF binaries.*BINFMT_ELF_FDPIC.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send -s "Y\r"
		} elseif { $binary_format == "flat" } {
			send -s "\r"
		} elseif { $binary_format == "shared-flat" } {
                       send -s "\r"
            }	
      }
      
          -re "Kernel support for flat binaries.*BINFMT_FLAT.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send -s "\r"
		} elseif { $binary_format == "flat" } {
			send -s "Y\r"
		} elseif { $binary_format == "shared-flat" } {
                       send -s "\r"
            }	
      }
      
          -re "Enable shared FLAT support.*BINFMT_SHARED_FLAT.*\\\[.*]" {
		if { $binary_format == "elf" } {
			send -s "\r"
		} elseif { $binary_format == "flat" } {
			send -s "\r"
		} elseif { $binary_format == "shared-flat" } {
                       send -s "Y\r"
            }	
      }
    
          -re "Binary format.*FLAT, Shared-FLAT, FDPIC.*\\\[.*]" {
            if { $binary_format == "flat" } {
                       send -s "FLAT\r"
            } elseif { $binary_format == "elf" } {
                       send -s "FDPIC\r"
            } elseif { $binary_format == "shared-flat" } {
                       send -s "Shared-FLAT\r"
            }
      }
      
           -re "Install ELF shared libraries.*CONFIG_INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {

             send -s "N\r"
      }

           -re "Install FLAT shared libraries.*CONFIG_INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {

             send -s "N\r"
      }
 
           -re "Enable ICACHE.*BLKFIN_CACHE.*\\\[.*]" {
		if { $icache == "on" } {
			send "Y\r"
		} elseif { $icache == "off" } {
			send "N\r"
		}
         }
      
	   -re "Enable DCACHE.*BLKFIN_DCACHE.*\\\[.*]" {
		if { $dcache == "on" } {
			send "Y\r"
		} elseif { $dcache == "off" } {
			send "N\r"
		}
         }
	 
           -re "Policy.*Write back.*BLKFIN_WB.*Write through.*BLKFIN_WT.*choice.*\\\[.*]" {
		if { $policy == "write_through" } {
			send "2\r"
		} elseif { $policy == "write_back" } {
			send "1\r"
		}
      }
      
           -re "Blackfin Serial Driver.*SERIAL_BLACKFIN.*\\\[.*]" {
	  		
			send "Y\r"		
      }
      
           -re "Mode.*DMA on RX and TX.*SERIAL_BLACKFIN_DMA.*PIO on RX and TX.*SERIAL_BLACKFIN_PIO.*choice\\\[.*]" {
		if { $uart_mode == "dma" } {
			send "1\r"
		} elseif { $uart_mode == "pio" } {
			send "2\r"
		}
      }
      
       "\\\(*) \\\[*]" {
	     
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
             break
      }
   }
}

step "Make uclibc config\n"

cd $uclinux_path/uClibc
set timeout 300
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
     -re "Target Architecture.*bfin.*TARGET_bfin.*bfinfdpic.*TARGET_bfinfdpic.*choice.*\\\[.*]" {
              if { $binary_format == "flat" } {
                       send "3\r"
            } elseif { $binary_format == "elf" } {
                       send "4\r"
            }
      }
       
     "\\\(*) \\\[*]" {
         send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
         send "\r"
      }

      eof {
         puts "End of uClibc configuration"
         break
      }

      timeout {
             puts "\n\nFATAL ERROR: config prompt timeout in uClibc make config"
         }
   }
}

step "Make"

cd $uclinux_path
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "Entering directory" { }
	     "Leaving directory" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      puts "ERROR: Error somewhere during make"

}


step "Copy linux"
 
set timeout 8
cd $uclinux_path
exec cp images/linux  /tftpboot

log_file
 
send_user "Ending build_policy_kernel.exp\n"


