#!/usr/bin/expect

source  ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set set_config_file 0

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

if { $set_config_file == 1 } {

step "Apply ppifcd config patch."

cd $uclinux_path/linux-2.6.x
if { $board_type == "BF537-STAMP" } {
        exec patch -p1 < ../testsuites/ppifcd/bf537_ppifcd_config_patch
} elseif { $board_type == "BF533-STAMP" } {
        exec patch -p1 < ../testsuites/ppifcd/bf533_ppifcd_config_patch
}

send_log "\n\n#### Set config under $uclinux_path/config folder.\n\n"

cd $uclinux_path/config
sleep 3
 set timeout 2
      spawn ex .config
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }
      sleep 1
      send "/CONFIG_USER_BLACKFIN_PPIFCDTEST\[ =]\r"
      expect "CONFIG_USER_BLACKFIN_PPIFCDTEST\[ =]"
      send "d\r"
      sleep .5
      expect ":"
      send "i\r"
      sleep .5
      send "CONFIG_USER_BLACKFIN_PPIFCDTEST=y\r"      
      send ".\r"      
      expect ":"
      sleep .5   
       
      send "wq\r"
      expect eof

cd $uclinux_path
set timeout 300
spawn make config

while 1 {
   expect {

       -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
            
             send "$board_type\r"
      }

      "\\\(*) \\\[*]" {
             send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
             puts "End of configuration"
             break
      }
      timeout {
             puts "\n\nFATAL ERROR: config prompt timeout in make config"
	     break

      }
   }
}
} else {

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
   expect {
   
   	   -re "AnalogDevices Products .*BF533-EZKIT, BF533-STAMP, BF537-STAMP.*\\\[.*]" {
	      send "$board_type\r"
      } 
   
   	   -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
          
             send "y\r"
      }

           -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             send "y\r"
      }

     	 
	 -re "Blackfin BF53x Programmable Flags Driver.*BF533_PFLAGS.*\\\[.*]" {
             send "Y\r"
      }
      
         -re "Blackfin BF5xx PPI Camera frame capture driver.*BF5xx_PPIFCD.*\\\[.*]" {
             send "Y\r"
      }
      
         -re "I2C support.*I2C\[^_].*\\\[.*]" {
             send "Y\r"
      }

        -re "I2C device interface.*I2C_CHARDEV.*\\\[.*]" {
             send "Y\r"
      }
              
	-re "Select BF537/6/4 default GPIO PFx PORTG.*BF537_PORT_G.*choice\\\[.*]" {
            if { $board_type == "BF537-STAMP" } {
                       send "2\r"
            } else {
                       send "\r"
            }
      }

       -re "Generic Blackfin and HHBF533/561 development board I2C support.*I2C_BFIN_GPIO.*\\\[.*]" {
             if { $board_type == "BF533-STAMP" } {
                        send "Y\r"
             } else {
                        send "N\r"
             }
      }
      
        -re "SDA is PF.*BFIN_SDA.*\\\[.*]" {
              if { $board_type == "BF533-STAMP" } {
                        send "2\r"
             } else {
                        send "\r"
             }
      }
      
        -re "SCL is PF.*BFIN_SCL.*\\\[.*]" {
              if { $board_type == "BF533-STAMP" } {
                        send "1\r"
             } else {
                        send "\r"
             }
      }
      
           -re "Blackfin TWI I2C support.*I2C_BFIN_TWI.*\\\[.*]" {
             if { $board_type == "BF537-STAMP" } {
                        send "Y\r"
             } else {
                        send "\r"
             }
      }

           -re "TWI clock.*TWICLK_KHZ.*\\\[.*]" {
             if { $board_type == "BF537-STAMP" } {
                        send "50\r"
             } else {
                        send "\r"
             }
      }
 
	 -re "PPIFCD test program.*CONFIG_USER_BLACKFIN_PPIFCDTEST.*\\\[.*]" {
             send "Y\r"
      }
      
       -re  "\\\(.*\\\) \\\[.*]" { 
             sleep .001
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }


      eof {
	     puts "End of configuration"
	     break
      }
      timeout {
	     puts "\n\nFATAL ERROR: config prompt timeout in make config"
           
      }
   }
}
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp
  
send_user "Ending $argv0\n"
log_file
 


