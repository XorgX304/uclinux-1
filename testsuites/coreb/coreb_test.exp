#!/usr/bin/expect

# Main entrance
source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]
set case_num 0

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

sleep 3
send "\r"
set spawn_id $kermit_spawn_id

step "Start testing."

incr case_num
set timeout 2
send "cat /sys/class/misc/coreb/coreb_status\r"
while 1 {
   expect {
      -re "Base Address.*Core B is stalled.*>" {
         send_user "Get coreb information from /sys\n"
         case_pass $case_num
         send "\r"
         break
      }
      timeout {
         send_user "Get coreb information from /sys\n"
         case_fail $case_num
         break
      }
   }
}

expect ">"
incr case_num
set timeout 2
send "modprobe dualcore_test\r"
while 1 {
   expect {
      -re "Dual core test module inserted.*>" {
         send_user "\nDual core test module inserted\n"
         send "\r"
         break
      }
      timeout {
         send_user "\nInsert coreb test module timeout\n"
         case_fail $case_num
         break
      }
   }
}

expect ">"
send "lsmod\r"
while 1 {
   expect {
      -re "dualcore_test.*>" {
         case_pass $case_num
         send "\r"
         break
      }
      timeout {
         case_fail $case_num
         break
      }
   }
}

expect ">"
set timeout 5
incr case_num
send "corebld /bin/coreb_get_testarg\r"
while 1 {
   expect {
      -re ".*not found" {
         send_user "\nexecute application corebld failed\n"
         case_fail $case_num
         break
      }
      -re "wrote.*wrote.*>" {
         send_user "\nexecuted application coreb_get_testarg on another core\n"
         case_pass $case_num
         send "\r"
         break
      }
      timeout {
         send_user "\nexecute application coreb_get_testarg on another core timeout\n"
         case_fail $case_num
         break
      }
   }
}

expect ">"
incr case_num
set timeout 2
send "cat /sys/class/misc/coreb/coreb_status\r"
while 1 {
   expect {
      -re "Base Address.*Core B is running.*>" {
         send_user "Core B is running.\n"
         case_pass $case_num
         send "\r"
         break
      }
      timeout {
         case_fail $case_num
         break
      }
   }
}

expect ">"
incr case_num
send "rmmod dualcore_test\r"
while 1 {
   expect {

      -re "Dual core test module removed: testarg = \\\[2\]*" {
         case_pass $case_num
         break
      }
      timeout {
         case_fail $case_num
         break
      }
   }
}

all_pass

send_user "Ending $argv0\n"

log_file
