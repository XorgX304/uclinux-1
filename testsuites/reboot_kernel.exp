#!/usr/bin/expect

# This file couldn't be indepently executed.
# It is meant to be included into ***_test.exp scripts. 

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
while 1 {
	expect {
	
	"U-Boot" {
		expect ">"
		send_user "We are in u-boot\n"
		set where_are_we "uboot"
		break
	}
	
	"Linux" {
		expect ">"
		send_user "We are in the kernel\n"
		set where_are_we "kernel"
		break
	}
	
	timeout {
		send_user "Can't tell if we are in u-boot or the kernel\n"
		# If the first version command doesn't work, run it once again.
		send "version\r"
	}
	}
}

if { $where_are_we == "uboot" } {
    set timeout 50 
    send "reset\r"   
    send_user "sending reset\n"    
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60	
	send "reboot\r"
	send_user "sending reboot\n"	
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"	
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

while 1 {
	expect {
		"Hit any key " {
			send "\r"
			break
		}
	
		timeout {
			send_user "Fail to reboot the kernel.\n"
			break
		}
	}
}
	
expect ">"
send -s "set bootargs $bootargs\r"
expect ">"
send -s "set serverip $serverip\r"
expect ">"
send -s "set ipaddr $targetip\r"
expect ">"
send -s "save\r"
expect ">"

send -s "tftpboot $bootaddr_high linux\r"
while 1 {
	expect {	
	    -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
                set image_size $expect_out(1,string)
                send_user "Image size is $image_size\n"
                break
            }

            timeout {
                send_user "Fail to tftp download linux image."
		# if tftpboot from high bootaddr failed, try to reload image from low bootaddr
                send -s "tftpboot $bootaddr_low linux\r"
                while 1 {
	           expect {	
	              -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
			 set image_size $expect_out(1,string)
			 send_user "Image size is $image_size\n"
		         break
		      }
                      timeout {
                         send_user "Fail to tftp download linux image."
                         exit 
                      }
                   }
                }
		break
            }	
	}
}

send -s "bootelf\r"

set timeout 180
while 1 {
      expect {

         -re "Kernel panic" {
            send_user "kernel panic detected... trying to recover from it"
            exit
         }

         -re "Sash command shell.*/> " {
            send_user "successful boot attempt"         
            break
         }
	 
	 -re "$kernel_prompt" {
            puts "successful boot attempt"          
            break
         }
         
	 -re "Welcome to.*#" {
            puts "successful boot attempt"          
            break
         }
         -re "Linux version (.*) " {
            set linux_version $expect_out(1,string)
         }

         # Look for gcc version N.N[.N[.N]]
         -re "gcc version (\[0-9](\.\[0-9]+)+)" {
            set gcc_version [lindex $expect_out(0,string) 2]
         }

         # Look for text followed by 1 or more spaces or tabs
         # followed by = followed by 1 or more spaces or tabs
         # followed by (0xNNNNNN-0xNNNNNN)
         -re "text\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_text $expect_out(1,string)
         }

         -re "data\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_data $expect_out(1,string)
         }

         -re "bss\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_bss $expect_out(1,string)
         }
         -re "rootfs\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_rootfs $expect_out(1,string)
         }

         # Note that here we're looking for zero or 1 space. Doh!
         -re "stack\[\x20\t]?=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
            set map_stack $expect_out(1,string)
         }

         -re "\[Ii]nstruction \[Cc]ache \[Ee]nabled" {
            set instruction_cache_boot_flag $CACHE_ENABLED
         }

         -re "\[Ii]nstruction \[Cc]ache \[Dd]isabled" {
            set instruction_cache_boot_flag $CACHE_DISABLED
         }

         -re "\[Dd]ata \[Cc]ache \[Ee]nabled" {
            set data_cache_boot_flag $CACHE_ENABLED
         }

         -re "\[Dd]ata \[Cc]ache \[Dd]isabled" {
            set data_cache_boot_flag $CACHE_DISABLED
         }

         timeout {
            send_user "Failed to reboot the linux kernel"	  
            exit
         }
      }
}

