#!/usr/bin/expect

#
#Test program to stress the system.
#

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set PING_COUNT  1999

# grab the user specified parameters.

if { $argc >= 1} {
   set PING_COUNT           [lindex $argv 0]
}

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

   
step "Start the stress testing."

send "ifconfig eth0 $targetip\r"
while 1 {
   sleep 3
   expect {
      ">" {
         set flag 1
         puts "ifconfig set success.\n"
         break
      }

      timeout {
            puts "Fail ifconfig. "
            break
         }
     }
}
 
   log_file
  
   set timeout 40
   spawn ./ftp_test.exp $targetip
   set ftp_test_id $spawn_id
   expect "Ftp is tested"
 
   spawn ./telnet_test.exp $targetip
   set telnet_test_id $spawn_id
   expect "Telnet is tested"
   
   set timeout [expr $PING_COUNT * 1.5]
    
   log_file stress_test_log
   
   set spawn_id $kermit_spawn_id
   send -s "ping $serverip\r"
   while 1 {
      expect {
	"icmp_seq=$PING_COUNT" {
		send -s "\3"
		break
	}

         timeout {
	 	puts "$TITLE ............\[FAIL\]\r"
		exit
         }
      }
   }

   set timeout 5
   while 1 {
      expect {
	 "> " {
        	break
      	}

      	timeout {
	 	puts "$TITLE ............\[FAIL\]\r"
		exit
	}
      }
   }

   set found 0
   spawn ps a
   while 1 {
      expect {
	"telnet_test" {
		incr found
	}

	"ftp_test" {
		incr found
	}
	
	"telnet_test <defunct>" {
		set found 0
		break
	}

	"ftp_test <defunct>" {
		set found 0
		break
	}
	
        eof {
	 	break
        }
      }
   }
   
   if {$found == 2} {
		set spawn_id $telnet_test_id
		send -s "\3"
		set spawn_id $ftp_test_id
		send -s "\3"
		send_log "\n$TITLE ............\[PASS\]\n"
		exit
   }

   send_log "\n$TITLE ............\[FAIL\]\n"


send_user "Ending $argv0\n"
log_file


