#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set debug_port "uart"

if { $argc >= 2} {
set debug_port [lindex $argv 1]
}

if { $debug_port == "uart" || $debug_port == "ethernet" } {
send_log "\n#### Debugging is through $debug_port port.\n"
} else {
send_log "\n#### This port $debug_port is not supported. Sorry.\n"
exit
}

if { $debug_port == "ethernet" } {

set bootparam "root=/dev/mtdblock0 rw kgdboe=@10.100.4.50/,@10.100.4.174/"

step "Apply kgdb patch."

cd $uclinux_path/linux-2.6.x

exec patch -p1  < ../bfin_patch/kgdb_patch/kgdb_bfin_linux-2.6.x.patch

exec patch -p1  < ../bfin_patch/kgdb_patch/kgdb_bfin_linux-2.6.x_test.patch
}

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

if { $debug_port == "ethernet" } {

#puts "Begin the interactive process of configuration"
while 1 {
    expect {
        -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Kernel debugging.*DEBUG_KERNEL.*\\\[.*]" {
            send "Y\r"
        }

        -re "KGDB: kernel debugging with remote gdb.*KGDB.*\\\[.*]" {
            send "Y\r"
        }
        
        -re "KGDB: connect over.*Ethernet.*KGDB_ETH.*UART.*KGDB_UART.*choice.*\\\[.*]" {
            send "1\r"
        }

        -re "KGDB: test.*KGDB_TEST.*\\\[.*]" {
            send "Y\r"
        }
        
        -re "Default bootloader kernel arguments.*CMDLINE_BOOL.*\\\[.*]" {
            send "Y\r"             
        }      

        -re "Initial kernel command string.*CMDLINE.*\\\[.*]" {
            send -s "$bootparam\r"
        }


        "\\\(*) \\\[*]" {
            sleep .01 
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}
} elseif { $debug_port == "uart" } {
while 1 {
    expect {
        -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Kernel debugging.*DEBUG_KERNEL.*\\\[.*]" {
            send "Y\r"
        }
        
         -re "KGDB: kernel debugging with remote gdb.*KGDB.*\\\[.*]" {
            send "Y\r"
        }
        
         -re "KGDB: use kgdb over the serial console.*KGDB_SERIAL_CONSOLE.*\\\[.*]" {
            send "Y\r"
        }

         -re "Default bootloader kernel arguments.*CMDLINE_BOOL.*\\\[.*]" {
            send "Y\r"
         }
 
         -re "Initial kernel command string.*CMDLINE.*\\\[(.*)]" {
            send -s "$expect_out(1,string) kgdboc=ttyBF1,57600n8\r"
         }

         -re "UART Mode.*DMA mode.*SERIAL_BFIN_DMA.*PIO mode.*SERIAL_BFIN_PIO.*choice\\\[.*]" {
                send "2\r"
         }

         -re "Enable UART0.*SERIAL_BFIN_UART0.*\\\[.*]" {
             send "Y\r"
        }

         -re "Enable UART1.*SERIAL_BFIN_UART1.*\\\[.*]" {
             send "Y\r"
        }

         -re "Blackfin On-Chip Watchdog Timer.*BFIN_WDT.*\\\[.*]" {
            send -s "N\r"
         }

        "\\\(*) \\\[*]" {
            sleep .01 
            send "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}
}

cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp

send_user "Ending $argv0\n"
log_file
