diff -urN linux-2.6.x/arch/blackfin/kernel/Makefile linux-2.6.x.kgdb/arch/blackfin/kernel/Makefile
--- linux-2.6.x/arch/blackfin/kernel/Makefile	2007-06-12 12:17:19.000000000 +0800
+++ linux-2.6.x.kgdb/arch/blackfin/kernel/Makefile	2007-06-12 12:09:40.000000000 +0800
@@ -13,4 +13,5 @@
 obj-$(CONFIG_BFIN_DMA_5XX)           += bfin_dma_5xx.o
 obj-$(CONFIG_DUAL_CORE_TEST_MODULE)  += dualcore_test.o
 obj-$(CONFIG_KGDB)                   += kgdb.o
+obj-$(CONFIG_KGDB)                   += kgdb_test.o
 obj-$(CONFIG_EARLY_PRINTK)           += early_printk.o
diff -urN linux-2.6.x/arch/blackfin/kernel/kgdb_test.c linux-2.6.x.kgdb/arch/blackfin/kernel/kgdb_test.c
--- linux-2.6.x/arch/blackfin/kernel/kgdb_test.c	1970-01-01 08:00:00.000000000 +0800
+++ linux-2.6.x.kgdb/arch/blackfin/kernel/kgdb_test.c	2007-06-12 12:09:40.000000000 +0800
@@ -0,0 +1,145 @@
+/*
+ * File:         arch/blackfin/kernel/kgdb_test.c
+ * Based on:
+ * Author:       Sonic Zhang
+ *
+ * Created:
+ * Description:
+ *
+ * Rev:          $Id: kgdb_bfin_linux-2.6.x.patch 4934 2007-02-13 09:32:11Z sonicz $
+ *
+ * Modified:
+ *               Copyright 2005-2006 Analog Devices Inc.
+ *
+ * Bugs:         Enter bugs at http://blackfin.uclinux.org/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see the file COPYING, or write
+ * to the Free Software Foundation, Inc.,
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/proc_fs.h>
+
+#include <asm/current.h>
+#include <asm/uaccess.h>
+#include <asm/system.h>
+
+#include <asm/blackfin.h>
+
+
+static char cmdline[256];
+static unsigned long len;
+
+int num1 __attribute__((l1_data));
+
+void kgdb_l1_test(void) __attribute__((l1_text));
+
+void kgdb_l1_test(void)
+{
+        printk(KERN_ALERT "L1(before change) : data variable addr = 0x%p, data value is %d\n", &num1, num1);
+        printk(KERN_ALERT "L1 : code function addr = 0x%p\n", kgdb_l1_test);
+        num1 = num1 + 10 ;
+        printk(KERN_ALERT "L1(after change) : data variable addr = 0x%p, data value is %d\n", &num1, num1);
+        return ;
+}
+#if defined(CONFIG_BF548) || defined(CONFIG_BF561)
+
+int num2 __attribute__((l2));
+/* Should be enabled after bug 4562 is fixed.
+void kgdb_l2_test(void) __attribute__((l2));
+*/
+void kgdb_l2_test(void)
+{
+        printk(KERN_ALERT "L2(before change) : data variable addr = 0x%p, data value is %d\n", &num2, num2);
+        printk(KERN_ALERT "L2 : code function addr = 0x%p\n", kgdb_l2_test);
+        num2 = num2 + 20 ;
+        printk(KERN_ALERT "L2(after change) : data variable addr = 0x%p, data value is %d\n", &num2, num2);
+        return ;
+}
+
+#endif
+
+int kgdb_test(char *name, int len, int count,int z)
+{
+	printk("kgdb name(%d): %s, %d, %d\n",len, name, count, z); 
+	count = z;
+	return count;
+}
+
+int test_proc_output (char *buf)
+{
+	kgdb_test("hello world!", 12, 0x55, 0x10);
+        kgdb_l1_test();
+        #if defined(CONFIG_BF548) || defined(CONFIG_BF561)
+        kgdb_l2_test();
+        #endif
+	return 0;
+}
+
+static int test_read_proc(char *page, char **start, off_t off,
+                         int count, int *eof, void *data)
+{
+	int len;
+
+	len = test_proc_output (page);
+	if (len <= off+count) *eof = 1;
+	*start = page + off;
+	len -= off;
+	if (len>count) len = count;
+	if (len<0) len = 0;
+	return len;
+}
+
+static int test_write_proc(struct file *file, const char *buffer,
+			   unsigned long count, void *data)
+{
+	if (count>=256)
+		len = 255;
+	else
+		len = count;
+
+	memcpy(cmdline, buffer, count);
+	cmdline[len] = 0;
+
+	return len;
+}
+
+
+static int __init cplbtest_init(void)
+{
+	struct proc_dir_entry *entry;
+
+	if ((entry=create_proc_entry ("kgdbtest", 0, NULL)) == NULL) {
+		return -ENOMEM;
+	}
+	
+	entry->read_proc = test_read_proc;
+	entry->write_proc = test_write_proc;
+	entry->data = NULL;
+
+	return 0;
+}
+
+
+static void __exit cplbtest_exit (void)
+{
+	remove_proc_entry ("kgdbtest", NULL);
+}
+
+module_init(cplbtest_init);
+module_exit(cplbtest_exit);
+MODULE_LICENSE("GPL");
