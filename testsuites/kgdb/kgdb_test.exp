#!/usr/bin/expect

#
#Test program to test the KGDB patch.
#
source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start $TITLE\r"

set timeout 10
set case_num 0

incr case_num
spawn bfin-uclinux-gdb $uclinux_path/linux-2.6.x/vmlinux
set gdb_id $spawn_id
while 1 {
      expect {
	"(gdb)" {
                case_pass $case_num
	 	break;
         }
         timeout {
                case_fail $case_num
		exit
         }
      }
}

while 1 {
	incr case_num
	send "target remote udp:$targetip:6443\r"
	expect {
		"breakpoint () at kernel" {
                case_pass $case_num
			expect { 
				"(gdb) " {
				}
			}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "break kgdb_test\r"
	expect {
		"Breakpoint 1" {
                case_pass $case_num
			expect { 
				"(gdb) " {
				}
			}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
                case_pass $case_num
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	set spawn_id $kermit_spawn_id
	send "\r"
	expect {
		"> " {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 1" {
                case_pass $case_num
		expect { 
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "list\r"
	expect {
		"(gdb) " {
                case_pass $case_num
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	set spawn_id $kermit_spawn_id
	expect {
		"hello world!" {
                case_pass $case_num
		expect {
			"> " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 1" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "break 51\r"
	expect {
		"Breakpoint 2" {
		expect {
                case_pass $case_num
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "bt\r"
	expect {
		"kgdb_test" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Breakpoint 2" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "d 1\r"
	send "info break\r"
	expect {
		"1   breakpoint" {
                case_fail $case_num
			exit
		}
		"2   breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "step\r"
	expect {
		"test_read_proc" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "print len\r"
	expect {
		"1 =" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	set spawn_id $kermit_spawn_id
	expect {
		"hello world!" {
		expect {
			"> " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send -s "cat /proc/kgdbtest\r"
	set spawn_id $gdb_id
	expect {
		"Breakpoint 2" {
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "d\r"
	expect {
		"Delete all breakpoints? (y or n)" {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send "y\r"
	expect {
		"(gdb) " {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send "info break\r"
	expect {
		"No breakpoints or watchpoints." {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "c\r"
	expect {
		"Continuing." {
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	set spawn_id $kermit_spawn_id
	expect {
		"hello world!" {
                case_pass $case_num
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	expect {
		"> " {
		}
	}
	incr case_num
	set spawn_id $gdb_id
	send "\3"
	expect {
		"breakpoint" {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	incr case_num
	send "detach\r"
	expect {
		"Ending remote debugging." {
                case_pass $case_num
		expect {
			"(gdb) " {
			}
		}
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	send "q\r"
	set spawn_id $kermit_spawn_id
	incr case_num
	send "\r"
	expect {
		"> " {
                case_pass $case_num
			break
		}
		timeout {
                case_fail $case_num
			exit
		}
	}
	
}
   
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file

