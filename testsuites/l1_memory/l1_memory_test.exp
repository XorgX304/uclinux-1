#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

step "Start testing."

set case_num 0

incr case_num

set timeout 30

expect "root:~>"
send "modprobe hello\r" 
while 1 {   
         expect {
	  "code function addr = 0xffa0\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f]*\[
	   ]*data variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], data value is 1*\[
	   ]*bss  variable addr = 0xff80\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], bss value is 0*\[
	   ]*data variable addr = 0xff90\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], data value is 2*\[
	   ]*bss  variable addr = 0xff90\[0-9a-f]\[0-9a-f]\[0-9a-f]\[0-9a-f], bss value is 0" {
		send_log "\nCase $case_num ...PASS\n"
		break
	 }
	  
	  timeout {
	   send_log "\nCase $case_num ...FAIL\n"
	   send_log "$TITLE ............\[FAIL\]\n"
	   exit
	 }
	 }
}

incr case_num

expect ">"
send "lsmod\r" 
while 1 {
   expect {
     -re "hello" {
        
         send_log "\nCase $case_num ...PASS\n"
         break
      }

      timeout {
        send_log "\nCase $case_num ...FAIL\n"
	send_log "$TITLE ............\[FAIL\]\n"
	exit
         }
     }
}

incr case_num

expect "root:~>"
send "rmmod hello\r" 

set timeout 5
expect "root:~>"
send "lsmod\r" 
while 1 {
   expect {
   
      "hello" {
        send_log "\nCase $case_num ...FAIL\n"
	send_log "$TITLE ............\[FAIL\]\n"
	exit
         }
	 
     timeout {
         send_log "\nCase $case_num ...PASS\n"
         break
      }
     
     }
}

  
send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n"

send_user "Ending $argv0\n"
log_file
 


