#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set TEST_PASS pass
set TEST_FAIL fail
set SLEEP_TIME 10

set timer_frequency [lindex $argv 0]

append TITLE " ($timer_frequency Mhz)"

if { $argc < 1} {
puts "Please input: timer_frequency."
puts "100, 250 or 1000(Mhz)."
exit
}

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\n"
set timeout 120
set case_num 0

incr case_num
send -s "cat /proc/uptime ; cat /proc/interrupts\r" 
while 1 {
   expect {
       -re "\[0-9]+ (\[0-9]+.\[0-9]+)" {
        	set START_TIME $expect_out(1,string)
        	expect {
			 -re "6: + (\[0-9]+) .* BFIN Timer Tick" {
			set TIMER_TICK_START $expect_out(1,string)
		#	send_log "$START_TIME  $TIMER_TICK_START\r"
			send_log "\rCase $case_num ...PASS\r"
			expect ">"
			break
      			}
		
		}
       
       }
    
   
      timeout {
                send_log "\rCase $case_num ...FAIL\r"
                send_log "\n$TITLE ............\[FAIL\]\n"
                exit      
         }
     }
}


incr case_num
send "sleep $SLEEP_TIME\r" 
while 1 {
expect {
      ">" {	
      		send_log "\rCase $case_num ...PASS\r"      
      		break	
      }
      timeout {
                send_log "\rCase $case_num ...FAIL\r"
                send_log "\n$TITLE ............\[FAIL\]\n"
                exit      
         }
     }
}

incr case_num
send -s "cat /proc/uptime ; cat /proc/interrupts\r" 
while 1 {
   expect {
    
	-re "\[0-9]+ (\[0-9]+.\[0-9]+)" {
        	set END_TIME $expect_out(1,string)
        	expect {
			 -re "6: + (\[0-9]+) .* BFIN Timer Tick" {
			set TIMER_TICK_END $expect_out(1,string)
		#	send_log "$END_TIME  $TIMER_TICK_END\r"
			send_log "\rCase $case_num ...PASS\r"
			expect ">"
			break
      			}
		
		}
       
       }
       
      timeout {
                send_log "\rCase $case_num ...FAIL\r"
                send_log "\n$TITLE ............\[FAIL\]\n"
                exit      
         }
     }
}


set TIMER_TICK_AVERAGE [ expr [ expr $TIMER_TICK_END - $TIMER_TICK_START ] / [ expr $END_TIME - $START_TIME ] ]
send_log "TIMER_TICK_AVERAGE  $TIMER_TICK_AVERAGE\r"

if {$TIMER_TICK_AVERAGE < [expr $timer_frequency + 25]   && $TIMER_TICK_AVERAGE > [expr $timer_frequency - 25] } {
   send_log "\n"
   send_log "\n$TITLE ............\[PASS\]\n"
} else {
   send_log "\n"
   send_log "\n$TITLE ............\[FAIL\]\n"
}
    
send_user "Ending $argv0\n"
log_file
 


