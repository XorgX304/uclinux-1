#!/usr/bin/expect
#
# Copyright (C) 2004 Bruce Giese
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Revision history
# 1/5/05    Bruce Giese       initial version for automated testing
# 1/27/05   Bruce Giese       major overhaul to add lots of options
#

source ../config.exp


#
#
proc usage {} {
   global argv0

   puts "Usage:  $argv0  output/bin-dir \[various options]"
   puts "Options:  --nfs <on|off>            use a network file system"
   puts "          --ltp                     modify the build for LTP testing"
   puts "             ltp is ON only because it can't easily be un-done"
   puts "          --dcache <on|off>         data cache"
   puts "          --icache <on|off>         instruction cache"
   puts "          --vco-multiplier <value>  VCO clock control"
   puts "          --cclock-divider <value>  core clock"
   puts "          --sclock-divider <value>  system clock"
   puts "          --baud-rate <9600|19200|38400|57600|115200>"
   puts "          --dhrystone <on|off>      adds a benchmark"
   puts "          --threads <on|off>        note that this adds Sys V stuff"
   puts "          --dejagnu                 modify the build for dejagnu testing"
   puts "          --apps <on|off>           add various small apps"
   puts "          --uClinux <path-to-uClinux-dist>"
   puts "          --logfile                 detailed logfile"
   puts "          --summary                 summary logfile"
   puts " "
   exit
}



#
#  Call this procedure instead of doing an exit so we can
#  do any cleanup needed.  Note that we use a temporary
#  logfile for bulk data and a summary logfile which is
#  never overwritten.
#
proc all_done {} {
   global result
   global summary_log_file

   # stop logging into the temp log file
   log_file

   # now open up the summary log file
   log_file $summary_log_file
   puts "logging summary into $summary_log_file"
   for {set i 0} {$i < [llength $result]} {incr i} {
      puts [lindex $result $i]
      send_log "[lindex $result $i]\n"
   }
   # We never return back to the main program.
   exit
}

#
#
#  This procedure sends text to both the current log file
#  and to the standard output.
#
proc tee { text_string } {
   send_log "$text_string\n"
   puts $text_string
}



#
#  Step
#
#  This procedure delineates steps in the testing within the
#  log file and screen output.
#
#
proc step { message } {
  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number 
}




#
#  Main Program
#
#
#

set SUCCESS_MESSAGE            "KERNEL BUILD SUCCESS"
set NO                         "N"

# default values for arguments
set PARAM_ON        "enable"
set PARAM_OFF       "disable"
set PARAM_UNCHANGED "will not be modified"
set nfs             $PARAM_UNCHANGED
set ltp             $PARAM_OFF
set dcache          $PARAM_UNCHANGED
set icache          $PARAM_UNCHANGED
set vco_multiplier  $PARAM_UNCHANGED
set cclock_divider  $PARAM_UNCHANGED
set sclock_divider  $PARAM_UNCHANGED
set baud_rate       $PARAM_UNCHANGED
set dhrystone       $PARAM_UNCHANGED
set threads         $PARAM_UNCHANGED
set dejagnu         $PARAM_UNCHANGED
set apps            $PARAM_UNCHANGED
set temp_log_file      "$log_dir/kernel-build-[exec date +%b-%d-%G-%H-%M]-log"
set summary_log_file   "$log_dir/kernel-build-[exec date +%b-%d-%G-%H-%M]-summary-log"


puts "\nThis program builds the kernel with the given options."

set argc [llength $argv]
if { $argc < 1} {
   usage
}
# grab the user selections.
set toolchain_dir        [lindex $argv 0]
set i 0
catch {foreach filename [glob $toolchain_dir/bfin-elf-*] {
   incr i
}}
if { $i < 10} {
   tee "ERROR: You need to provide the toolchain path\n"
   usage
}


#
# The list "result" contains a cumulative status of the testing
# and it will be placed into the summary log file
#
set result "{Kernel Build Test on [exec date]}"


for {set i 0} {$i < $argc} {incr i} {

   switch -exact -- [lindex $argv $i] \
      "--nfs" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "nfs is enabled"
            set nfs $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "nfs is disabled"
               set nfs $PARAM_OFF
            } else {
               usage
            }
         }
      } "--ltp" {
         lappend result "LTP testing is enabled"
         set ltp $PARAM_ON
      } "--dcache" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "dcache is enabled"
            set dcache $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "dcache is disabled"
               set dcache $PARAM_OFF
            } else {
               usage
            }
         }
      } "--icache" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "icache is enabled"
            set icache $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "icache is disabled"
               set icache $PARAM_OFF
            } else {
               usage
            }
         }
      } "--vco-multiplier" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set vco_multiplier [lindex $argv $i]
         lappend result "VCO multiplier is $vco_multiplier"
      } "--cclock-divider" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set cclock_divider [lindex $argv $i]
         lappend result "core clock divider is $cclock_divider"
      } "--sclock-divider" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set sclock_divider [lindex $argv $i]
         lappend result "system clock divider is $sclock_divider"
      } "--baud-rate" {
         if { $argc < [expr $i + 2]} {
            usage 
         }
         incr i
         set baud_rate [lindex $argv $i]
         lappend result "baud rate is $baud_rate"
      } "--dhrystone" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "dhrystone is enabled"
            set dhrystone $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "dhrystone is disabled"
               set dhrystone $PARAM_OFF
            } else {
               usage
            }
         }
      }  "--threads" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "threads enabled"
            set threads $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "threads disabled"
               set threads $PARAM_OFF
            } else {
               usage
            }
         }
      }  "--dejagnu" {
         set dejagnu $PARAM_ON
      }  "--apps" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         if { [lindex $argv $i] == "on" } {
            lappend result "misc apps enabled"
            set apps $PARAM_ON
         } else {
            if { [lindex $argv $i] == "off" } {
               lappend result "misc apps disabled"
               set apps $PARAM_OFF
            } else {
               usage
            }
         }
      }  "--uClinux" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set uclinux_path [lindex $argv $i]
         lappend result "uClinux dir is $uclinux_path"
      }  "--logfile" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set temp_log_file [lindex $argv $i]
      }  "--summary" {
         if { $argc < [expr $i + 2]} {
            usage
         }
         incr i
         set summary_log_file [lindex $argv $i]
      }
}


#
# Need to set the PATH to include gcc etc.
#
set env(PATH) $toolchain_dir:$env(PATH)

#
# Direct all output to the tempoary log file which is always overwritten:
#
log_file -noappend -a $temp_log_file


tee "[exec date]\n"
tee "   location of executables is $toolchain_dir"
tee "   uClinux dir: $uclinux_path"
tee "   nfs setting: $nfs"
tee "   LTP setting: $ltp"
tee "   dcache enable setting: $dcache"
tee "   icache enable setting: $icache"
tee "   vco multiplier setting: $vco_multiplier"
tee "   core clock setting: $cclock_divider"
tee "   system clock setting: $sclock_divider"
tee "   baud rate setting: $baud_rate"
tee "   dhrystone setting: $dhrystone"
tee "   threads setting: $threads"
tee "   dejagnu setting: $dejagnu"
tee "   apps setting: $apps"
tee "\n"

set kernel_dir_is_good_flag 0
set timeout 2
spawn ls $uclinux_path
while 1 {
   expect {

      "Makefile" {
         set kernel_dir_is_good_flag 1
      }

      eof {
         break
      }

      timeout {
         break
      }
   }
}
if { $kernel_dir_is_good_flag == 0} {
   tee "ERROR: The uClinux directory does not contain a Makefile\n"
   exit
}


if { $ltp == $PARAM_ON} {
   step "Modify build for LTP testing"
   set ltp_already_done_flag 0
   spawn grep modified-full $uclinux_path/user/blkfin-test/Makefile
   while 1 {
      expect {

         "modified-full" {
            set ltp_already_done_flag 1
         }

         eof {
            break
         }

         timeout {
            tee "WARNING: grep timed out"
            break
         }
      }
   }
   if { $ltp_already_done_flag == 0 } {
      tee "Modify $uclinux_path/vendors/ADI/BF533/Makefile"

      exec rm -fr /home/bfarm/bfin/under_test/modified-full-20040707
      exec cp -fr /home/bfarm/ltp/modified-full-20040707 /home/bfarm/bfin/under_test/modified-full-20040707

      set timeout 2
      spawn ex $uclinux_path/vendors/ADI/BF533/Makefile
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         } 
      }

      send "/BLOCKS\r"
      expect "BLOCKS*="
      send "d\r"
      expect ":"
      send "i\r"
      sleep .5
      send "BLOCKS = 32768\r"
      sleep .5
      send "INODES = 8192\r"
      send ".\r"
      expect ":"
      send "+1\r"
      expect "INODES"
      send "d\r"
      send "/ROMFS_DIRS\r"
      expect "ROMFS_DIRS"
      send "s/$/ bin\\\/testcases\r"
      expect :
      send "wq\r"
      expect eof

      tee "Modify $uclinux_path/user/blkfin-test/Makefile"
      spawn ex $uclinux_path/user/blkfin-test/Makefile
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }

      send "/dir_y =\r"
      expect "dir_y ="
      send "+1\r"
      expect ":"
      send "i\r"
      sleep .5
      send "dir_y += /home/bfarm/bfin/under_test/modified-full-20040707\r"
      send ".\r"
      expect ":"
      send "wq\r"
      expect eof

# We probably don't need this anymore.  B Giese 3/22/05
#      exec cp -f /home/bfarm/ltp/config.arch $uclinux_path/vendors/config/bfin/config.arch

      tee "Modify $uclinux_path/linux-2.6.x/init/Kconfig"
      spawn ex $uclinux_path/linux-2.6.x/init/Kconfig
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }

      send "/SYSVIPC\r"
      expect "SYSVIPC"
      send "/depends on MMU\r"
      expect "depends on MMU"
      send "d\r"
      expect ":"
      send "wq\r"
      expect eof

      tee "Modify $uclinux_path/linux-2.6.x/ipc/Makefile"
      spawn ex $uclinux_path/linux-2.6.x/ipc/Makefile
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }

      send "/shm.o\r"
      expect "shm.o"
      send "s/shm.o//\r"
      expect ":"
      send "wq\r"
      expect eof

      catch { exec rm $uclinux_path/linux-2.6.x/ipc/shm.c}

      tee "Modify $uclinux_path/linux-2.6.x/ipc/util.c"
      spawn ex $uclinux_path/linux-2.6.x/ipc/util.c
      expect {
         "Entering Ex mode*Normal mode." { }

         "already exists!" {
            send "e\r"
            sleep 1
         }
      }

      send "/shm_init\r"
      expect "shm_init"
      send "d\r"
      expect ":"
      send "wq\r"
      expect eof

      tee "done with LTP modifications"
   } else {
      puts "\n\n"
      tee "build already modified for LTP, nothing done"
      puts "\n\n"
   }
}


step "Cleanup and Setup"
cd $uclinux_path
set timeout 600
spawn make clean
while 1 {
	expect {
		"Entering directory" { }
		"Leaving directory" { }
		"rm -f"   { }
		eof        { break }
	}
}


step "configure FIRST PASS (WORKAROUND: need 2 passes)"
cd $uclinux_path
set timeout 300
spawn make config

tee "Begin the interactive process of configuration"
tee "ON THE FIRST PASS, DON'T EVEN TRY TO SET ANYTHING: BUG WORKAROUND"
while 1 {
   expect {

      "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }

      eof {
	     tee "End of configuration"
	     break
      }
      timeout {
	     tee "\n\nFATAL ERROR: config prompt timeout in make config"
             lappend result "FATAL ERROR: config prompt timeout in make config"
             all_done
      }
   }
}



step "configure SECOND PASS (WORKAROUND: need 2 passes)"
cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

tee "Begin the interactive process of configuration"
while 1 {
   expect {

      -re "Customize Kernel Settings.*CONFIG_DEFAULTS_KERNEL.*\\\[././.]" {
             tee "Y"
             sleep .5
             send "y\r"
      }

      -re "Customize Vendor/User Settings.*CONFIG_DEFAULTS_VENDOR.*\\\[././.]" {
             tee "Y"
             sleep .5
             send "y\r"
      }

      -re "Load all symbols for debugging/kksymoops.*\\\[.*]" {
             tee "N"
             sleep .5
             send "n\r"
      }

      -re "reboot.*sash.*CONFIG_USER_SASH_REBOOT.*\\\[.*]" {
             tee "Y"
             sleep .5
             send "y\r"
      }

      -re "IP: kernel level autoconfiguration.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
            tee "Y: nfs is on"
            sleep .3
            send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
                tee "N: nfs is off"
                sleep .3
                send "n\r"
            } else {
                send "\r"
            }
         }
      }

      -re "IP: BOOTP support.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
            tee "Y: nfs is on"
            sleep .3
            send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "N: nfs is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "NFS file system support.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
            tee "Y: nfs is on"
            sleep .3
            send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "N: nfs is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Provide NFSv3 client support.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
             tee "Y: nfs is on"
             sleep .3
             send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "N: nfs is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Root file system on NFS.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
            tee "Y: nfs is on"
            sleep .3
            send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "N: nfs is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Compiled-in Kernel Boot Parameter.*\\\[.*]" {
         if { $nfs == $PARAM_ON} {
            tee "Y: nfs is on"
            sleep .3
            send "y\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "N: nfs is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Kernel Boot Parameter .BOOTPARAM_STRING. \\\[root=.*]" {
         if { $nfs == $PARAM_ON} {
            tee "nfs is on"
            sleep .3
            send "root=/dev/nfs rw ip=bootp\r"
         } else {
            if { $nfs == $PARAM_OFF} {
               tee "nfs is off"
               sleep .3
               send "root=/dev/mtdblock0 rw\r"
            } else {
               send "\r"
            }
         }
      }

      "Tinylogin \\\(CONFIG_USER_TINYLOGIN_TINYLOGIN)*\\\[*]" {
         if { $ltp == $PARAM_ON} {
            tee "Y: LTP on"
            sleep .3
            send "y\r"
         } else {
            send "\r"
         }
      }

      "adduser \\\(CONFIG_USER_TINYLOGIN_ADDUSER)*\\\[*]" {
         if { $ltp == $PARAM_ON} {
            tee "Y: LTP on"
            sleep .3
            send "y\r"
         } else {
            send "\r"
         }
      }

      "addgroup \\\(CONFIG_USER_TINYLOGIN_ADDGROUP)*\\\[*]" {
         if { $ltp == $PARAM_ON} {
            tee "Y: LTP on"
            sleep .3
            send "y\r"
         } else {
            send "\r"
         }
      }

      -re "pThreads threaddemos.*\\\[.*]" {
         if { $threads == $PARAM_ON} {
            tee "Y: threads on"
            sleep .3
            send "y\r"
         } else {
            if { $threads == $PARAM_OFF} {
               tee "N: threads off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Enable CACHE.*BLKFIN_CACHE.*\\\[.*]" {
         if { $icache == $PARAM_ON} {
            tee "Y: icache is on"
            sleep .3
            send "y\r"
         } else {
            if { $icache == $PARAM_OFF} {
               tee "N: icache is off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Enable DCACHE.*BLKFIN_DCACHE.*\\\[.*]" {
         if { $dcache == $PARAM_ON} {
            tee "Y: dcache is on"
            sleep .3
            send "y\r"
         } else {
            if { $dcache == $PARAM_OFF} {
               tee "N: dcache is off"
               sleep 5
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "VCO Multiplier.*\\\[.*]" {
         if { $vco_multiplier != $PARAM_UNCHANGED} {
            tee "set VCO"
            sleep .3
            send "$vco_multiplier\r"
         } else {
            send "\r"
         }
      }

      -re "Core Clock Divider.*\\\[.*]" {
         if { $cclock_divider != $PARAM_UNCHANGED} {
            tee "set cclock"
            sleep .3
            send "$cclock_divider\r"
         } else {
            send "\r"
         }
      }

      -re "System Clock Divider.*\\\[.*]" {
         if { $sclock_divider != $PARAM_UNCHANGED} {
             tee "set sclock"
             sleep .3
             send "$sclock_divider\r"
         } else {
             send "\r"
         }
      }

      -re "BAUD_115200" {
         if { $baud_rate_done_flag == 0 } {
            # We need to avoid a false detect.
            set baud_rate_done_flag 1
            if { $baud_rate != $PARAM_UNCHANGED} {
               tee "set baud rate"
               sleep .3
               send "$baud_rate\r"
            } else {
               send "\r"
            }
         }
      }

      -re "dhrystone.*\\\[.*]" {
         if { $dhrystone == $PARAM_ON} {
            tee "Y: dhrystone on"
            sleep .3
            send "y\r"
         } else {
            if { $dhrystone == $PARAM_OFF} {
               tee "N: dhrystone off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "RTC test program .CONFIG_USER_BLACKFIN_RTC. \\\[.*]" {
	  if { $ltp == $PARAM_ON } {
	      tee "Y: ltp is on"
	      sleep .3
	      send "Y\r"
	  } else {
	      send "\r"
	  }
      }

      -re "BusyBox 1.00.*CONFIG_USER_BUSYBOXNEW_BUSYBOXNEW.*\\\[.*]" {
         tee "Y"
         sleep .3
         send "y\r"
      }

      # Turn on (nearly) all of the busybox features for LTP.
      -re "\\\(CONFIG_USER_BUSYBOX_(.*)\\\) \\\[.*]" {
         if { $ltp == $PARAM_ON } {
            set x $expect_out(1,string)
            puts $expect_out(1,string)
            if { $x!="ASH" && $x!="SH_IS_ASH" && $x!="LASH" \
            && $x!="SH_IS_LASH" && $x!="HUSH" && $x!="SH_IS_HUSH" \
            && $x!="INSMOD" && $x!="INSMOD_LOADINKMEM" \
            && $x!="LSMOD" && $x!="MODPROBE" && $x!="RMMOD" \
            && $x!="NEW_MODULE_INTERFACE" && $x!="OLD_MODULE_INTERFACE" \
            && $x!="INSMOD_VERSION_CHECKING" && $x!="NFSMOUNT" } {
               tee "Y: ltp is on"
               sleep .3
               send "Y\r"
            } else {
               send "N\r"
               tee "N: ltp is on"
            }
         } else {
            send "\r"
         }
      }

      "\\\(*) \\\[*]" {
	     send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
             send "\r"
      }


      eof {
	     tee "End of configuration"
	     break
      }
      timeout {
	     tee "\n\nFATAL ERROR: config prompt timeout in make config"
             lappend result "FATAL ERROR: config prompt timeout in make config"
             all_done
      }
   }
}



step "uClibc make menuconfig"
set timeout 360
cd $uclinux_path/uClibc
spawn make config

tee "Begin the interactive process of configuration"
while 1 {
   expect {

      -re "POSIX Threading Support.*\\\[.*]" {
         if { $threads == $PARAM_ON} {
             tee "Y: threads on"
             sleep .3
             send "y\r"
         } else {
            if { $threads == $PARAM_OFF} {
               tee "N: threads off"
               sleep .3
               send "n\r"
            } else {
               send "\r"
            }
         }
      }

      -re "Remote Procedure Call.*\\\[.*]" {
         if { $dejagnu == $PARAM_ON} {
            tee "Y: dejagnu is on"
            sleep .3
            send "y\r"
         } else {
            send "\r"
         }
      }

      -re "uClibc runtime library directory .RUNTIME_PREFIX" {
         if { $dejagnu == $PARAM_ON} {
             tee "X: dejagnu is on"
             sleep .3
             send "/home/bfarm/bfin/under_test/output/bfinelf\r"
         } else {
             send "\r"
         }
      }

      -re "uClibc development environment directory .RUNTIME_PREFIX" {
         if { $dejagnu == $PARAM_ON} {
             tee "X: dejagnu is on"
             sleep .3
             send "/home/bfarm/bfin/under_test/output/bfinelf\r"
         } else {
             send "\r"
         }
      }


      "\\\(*) \\\[*]" {
         send "\r"
      }

      -re "\[cC]hoice\\\[.*]:" {
         send "\r"
      }

      eof {
	 tee "End of uClibc configuration"
	 break
      }

      timeout {
	     tee "\n\nFATAL ERROR: config prompt timeout in uClibc make config"
             lappend result "FATAL ERROR: config prompt timeout in uClibc make config"
             all_done
      }
   }
}




if { $ltp == $PARAM_ON } {
   step "linux-2.6.x make menuconfig"
   set timeout 360
   cd $uclinux_path/linux-2.6.x
   spawn make config

   tee "Begin the interactive process of configuration"
   while 1 {
      expect {

         -re "System V IPC.*\\\[.*]" {
            tee "Y: LTP on"
            sleep .3
            send "y\r"
         }
 
         "\\\(*) \\\[*]" {
            send "\r"
         }

         -re "\[cC]hoice\\\[.*]:" {
            send "\r"
         }

         eof {
            tee "End of linux-2.6.x configuration"
            break
         }

         timeout {
            tee "\n\nFATAL ERROR: config prompt timeout in linux-2.6.x make config"
            lappend result "FATAL ERROR: config prompt timeout in linux-2.6.x make config"
            all_done
         }
      }
   }
}



step "make"
set timeout 4800
cd $uclinux_path

#
# Need to set the PATH to include gcc etc. again.  Why?  I don't know,
# but it was failing until I did this.
#
set env(PATH) $toolchain_dir:$env(PATH)

set make_start [timestamp]
spawn make
set timeout 1200
set bfin_make_status failure
while 1 {
      expect {
	     "Entering directory" { }
	     "Leaving directory" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}

if { $bfin_make_status == "failure" } {
      tee "ERROR: Error somewhere during make"
      lappend result "FATAL ERROR: Error somewhere in make"
      all_done
}



tee "\nkernel make time was [expr [timestamp] - $make_start] seconds"
lappend result "kernel make time was [expr [timestamp] - $make_start] seconds."




step "Do a make in the $dxe_dirname directory"
cd $dxe_dirname
set bfin_make_status failure
set timeout 600
spawn make
while 1 {
      expect {
	     "Entering directory" { }
	     "LOAD" { set bfin_make_status success }
	     "Error" {set bfin_make_status failure }
	     "/bin/sh" { }
	     eof { break }
      }
}
if { $bfin_make_status == "failure" } {
      tee "ERROR: Error somewhere during make in $dxe_dirname"
      lappend result "Warning: Error somewhere in make in $dxe_dirname"
}


if { $dejagnu == $PARAM_ON} {

   cd $uclinux_path/uClibc
   set timeout 240
   spawn make install
   expect eof

}



step "copy $dxe_filename to tftpboot"
set timeout 8
exec cp $dxe_dirname/$dxe_filename /tftpboot

# Check the size, time, and date just to be sure.
cd /tftpboot
set dxe_confirmation [exec ls -l $dxe_filename]
tee $dxe_confirmation


step "all done"

lappend result "kernel build result: Success"
# We must send out the specific success message to tell the calling script.
tee $SUCCESS_MESSAGE
all_done
