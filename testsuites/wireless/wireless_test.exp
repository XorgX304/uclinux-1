#!/usr/bin/expect

source  ../kernel_config.exp

log_file [log_file_name "$argv0"]

send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

set argc [llength $argv]
if { $argc < 1} {
   puts "Usage:  $argv0 ping_ipaddr"
   puts ""
   exit
#}
set ping_ipaddr             [lindex $argv 0]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

set case_num 0
step "Start testing."

incr case_num
step "Set key"
set timeout 2
send "iwconfig eth1 essid dlink key s:12345\r"
while 1 {
   expect {
      "root:~>" {
         send_log "\nSet key done\n"
         case_pass $case_num
         break
      }
      timeout {
         send_log "\nSet key timeout\n"
         case_fail $case_num
      }
   }
}

step "dhcpcd eth1"
set timeout 30
send "dhcpcd eth1 &\r"
while 1 {
   expect {

      -re ".*Connected" {
         send_log "\nNetwork is connected\n"
         case_pass $case_num
         break
      }

      timeout {
         send_log "\nStart dhcpcd timeout\n"
         case_fail $case_num
      }
   }
}

step "iwconfig"
set timeout 2
send "iwconfig\r"
sleep 2
while 1 {
   expect {

      -re ".*802\.11.*" {
         send_log "\niwconfig done\n"
         send_user "\niwconfig done\n"
         break
      }

      -re ".* ESSID:\"\".*" {
         send_log "\nNot reached WLAN\n"
         case_fail $case_num
      }
      timeout {
         break
      }
   }
}

sleep 10
send_log "\nWaiting for network up\n"
send_user "\nWaiting for network up\n"

step "ifconfig"
set timeout 10

send "ifconfig eth1 192.168.1.2\r"
while 1 {
   expect {
      -re "root:~>" {
         send_log "\nSet IP address done\n"
         case_pass $case_num
         break
      }

      timeout {
         send_log "\nifconfig timeout\n"
         case_fail $case_num
      }
   }
}

send "ifconfig eth1\r"
while 1 {
   expect {
      -re "inet addr:\[0-9].*" {
         send_log "\nGet ipaddr for wireless link\n"
         case_pass $case_num
         break
      }

      timeout {
         send_log "\nifconfig timeout\n"
         case_fail $case_num
      }
   }
}

step "begin test"
send "ping $ping_ipaddr\r"
sleep 1
send "\03\r"
while 1 {
   expect {
      -re ".* 0% packet loss.*" {
         send_log "\nping remote host\n"
         case_pass $case_num
         break
      }
      timeout {
         send_log "\nping fail\n"
         case_fail $case_num
      }
   }
}

all_pass

send_user "Ending $argv0\n"

log_file
