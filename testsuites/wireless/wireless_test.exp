#!/usr/bin/expect

source  ../kernel_config.exp

log_file [log_file_name "$argv0"]

send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

set argc [llength $argv]
if { $argc < 1} {
   puts "Usage:  $argv0 ping_ipaddr"
   puts ""
   exit
}
# grab the user specified parameters.
set ping_ipaddr             [lindex $argv 0]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

set test_flag	0

sleep 5

step "Start Wireless Network testing"

step "Set key"
set timeout 2
send "iwconfig eth1 essid dlink key s:12345\r"
while 1 {
   expect {
      "root:~>" {
         send_log "\nSet key done\n"
         send_user "\nSet key done\n"
         break
      }
      timeout {
         send_log "\nSet key timeout\n"
         send_user "\nSet key timeout\n"
         incr test_flag
         break
      }
   }
}

step "dhcpcd eth1"
set timeout 30
send "dhcpcd eth1 &\r"
while 1 {
   expect {

#      -re "\[0-9]*" {
#         send_log "\nStart dhcpcd for eth1\n"
#         send_user "\nStart dhcpcd for eth1\n"
#         break
#      }

      -re ".*Connected" {
         send_log "\nNetwork is connected\n"
         send_user "\nNetwork is connected\n"
         break
      }

      timeout {
         send_log "\nStart dhcpcd timeout\n"
         send_user "\nStart dhcpcd timeout\n"
         incr test_flag
         break
      }
   }
}

step "iwconfig"
set timeout 2
send "iwconfig\r"
sleep 2
while 1 {
   expect {

#      -re ".*802\.11.*" {
#         send_log "\niwconfig done\n"
#         send_user "\niwconfig done\n"
#         break
#      }

      -re ".* ESSID:\"\".*" {
         send_log "\nNot reached WLAN\n"
         send_user "\nNot reached WLAN\n"
         incr test_flag
         break
      }
      timeout {
         break
      }
   }
}

sleep 60
send_log "\nWaiting for network up\n"
send_user "\nWaiting for network up\n"

step "ifconfig"
set timeout 10
send "ifconfig eth1\r"
while 1 {
   expect {
      -re "inet addr:\[0-9].*" {
         send_user "\nGet ipaddr for wireless link\n"
         break
      }

      timeout {
         send_log "\nifconfig timeout\n"
         send_user "\nifconfig timeout\n"
         incr test_flag
         break
      }
   }
}

step "begin test"
send "ping $ping_ipaddr\r"
sleep 1
send "\03\r"
while 1 {
   expect {
      -re ".* 0% packet loss.*" {
         send_log "\nping remote host\n"
         send_user "\nping remote host\n"
         break
      }
      timeout {
         send_log "\nping fail\n"
         send_user "\nping fail\n"
         incr test_flag
         break
      }
   }
}

if { $test_flag == 0 } {
   send_log "\nWireless network test PASS\n"
   send_user "\nWireless network test PASS\n"
} else {
   send_log "\nWireless network test FAIL\n"
   send_user "\nWireless network test FAIL\n"
}

exit
