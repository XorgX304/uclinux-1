#!/usr/bin/expect

source  ../kernel_config.exp

log_file [log_file_name "$argv0"]

send_user "Starting $argv0\n"

set TITLE [title "$argv0"]

step "Spawn kermit"
source ../spawn_kermit.exp

step "Reboot the kernel."
# To add following line here to indicate that if the bootargs is different,
# it could be set here. If the bootargs value is 0, it needn't be stated,
# for it is the default value.
# set bootargs  $bootargs_param0
source ../reboot_kernel.exp

step "Start testing."
set case_num 0
set 4G "+4050M"
set 10G "+10240M"
set 20G "+20480M"
set 30G "+30720M"
set MAX "\r"
set NUM_CYLINDER_DOS "$4G"
set NUM_CYLINDER_EXT2 "$MAX"

sleep 5
send "mkdir /mnt/hd1\r"
send "mkdir /mnt/hd2\r"

set timeout 5
incr case_num
send "dmesg\r"
while 1 {
    expect {
        -re "TOSHIBA MK4032GAX.*78140160 sectors.*configured for UDMA/100.*sda: sda1.*>" {
            send_user "Harddisk found, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Harddisk not found, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/interrupts\r"
while 1 {
    expect {
        -re "pata-bf54x.*>" {
            send_user "Libata found, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Libata not found, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cat /proc/devices\r"
while 1 {
    expect {
        -re "sd.*>" {
            send_user "Libata block device “sd” found, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Libata block device “sd” not found, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "p\r"
set timeout 10
while 1 {
    expect {
        -re "/dev/sda1" {
            send "d\r"
            expect -re "Partition number.*"
            send "1\r"
            expect -re "Command.*"
            send "w\r"
            expect "root:~>"
            send_user "sda1 is deleted\n"
            break
        }
        timeout {
            send "q\r"
            break
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "p\r"
set timeout 10
while 1 {
    expect {
        -re "/dev/sda2" {
            send "d\r"
            expect -re "Partition number.*"
            send "2\r"
            expect -re "Command.*"
            send "w\r"
            expect "root:~>"
            send_user "sda1 is deleted\n"
            break
        }
        timeout {
            send "q\r"
            break
        }
    }
}

set timeout 10
send "fdisk /dev/sda\r"
expect -re "Command.*:"
send "n\r"
expect -re "primary partition.*:"
send "p\r"
expect -re "Partition number.*:"
send "1\r"
expect -re "First cylinder.*:"
send "\r"
expect -re "Last cylinder.*:"
send "$NUM_CYLINDER_DOS\r"
expect -re "Command.*:"
send "t\r"
expect -re "Partition number.*:"
send "1\r"
expect -re "Hex code.*:"
send "b\r"
expect -re "Command.*:"
send "n\r"
expect -re "primary partition.*"
send "p\r"
expect -re "Partition number.*"
send "2\r"
expect -re "First cylinder.*"
send "\r"
expect -re "Last cylinder.*"
send "$NUM_CYLINDER_EXT2\r"
expect -re "Command.*"
send "w\r"
expect -re "root:~>"

set timeout 300
incr case_num
send "mkdosfs /dev/sda1\r"
while 1 {
    expect {
        -re "Hardware Trace.*root:~>" {
            send_user "mkdosfs sda1 crash, test fail\n"
            case_fail $case_num
        }
        -re "mkdosfs.*\\\)..root:~>" {
            send_user "mke2fs sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mke2fs sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 900
incr case_num
send "mke2fs /dev/sda2\r"
while 1 {
    expect {
        -re "Hardware Trace.*root:~>" {
            send_user "mke2fs sda2 crash, test fail\n"
            case_fail $case_num
        }
        -re "done.*Writing superblocks and filesystem accounting information.*done.*>" {
            send_user "mke2fs sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mke2fs sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/sda1 /mnt/hd1\r"
while 1 {
    expect {
        -re "mount.*failed.*>" {
            send_user "mount sda1 failed, test fail\n"
            case_fail $case_num
        }
        -re "root:~>" {
            send_user "mount sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "mount /dev/sda2 /mnt/hd2\r"
while 1 {
    expect {
        -re "mount.*failed.*>" {
            send_user "mount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re "root:~>" {
            send_user "mount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "mount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "cp /bin/busybox /mnt/hd1/abc\r"
expect "root:~>"
send "ls /mnt/hd1\r"
while 1 {
    expect {
        -re "abc.*>" {
            send_user "Copy to HD done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Copy to HD timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "rm /mnt/hd1/abc\r"
expect "root:~>"
send "ls /mnt/hd1\r"
while 1 {
    expect {
        -re "abc.*>" {
            send_user "Delete in HD fail, test fail\n"
            case_fail $case_num
        }
        -re "root:~>" {
            send_user "Delete in HD done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Delete in HD timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time dd if=/dev/zero of=/mnt/hd2/32m.bin bs=1M count=32\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*>" {
            send_user "Generate a 32M file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate a 32M file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 4
incr case_num
send "time cat /mnt/hd2/32m.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*>" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "umount /mnt/hd1\r"
while 1 {
    expect {
        -re "umount.*failed.*>" {
            send_user "umount sda1 failed, test fail\n"
            case_fail $case_num
        }
        -re "root:~>" {
            send_user "umount sda1 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount sda1 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 5
incr case_num
send "umount /mnt/hd2\r"
while 1 {
    expect {
        -re "umount.*failed.*>" {
            send_user "umount sda2 failed, test fail\n"
            case_fail $case_num
        }
        -re "root:~>" {
            send_user "umount sda2 done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount sda2 timeout, test fail\n"
            case_fail $case_num
        }
    }
}

send_log "\n"
send_log "\n$TITLE ............\[PASS\]\n" 

send_user "Ending $argv0\n"

log_file
