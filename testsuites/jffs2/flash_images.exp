#!/usr/bin/expect
log_file flash_images_log
send_user "Starting flash_images.exp \n"

source ../kernel_config.exp

proc step { message } {

  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

set step_sequence_number    1

step "Start kermit"

send_user "Start up kermit on port $ttydev\n"

# Now set up the kermit parameters.
#  I want these all contained in this file to make it easier for users.
#  This just builds up a list of commands which are sent to kermit.
#
set kparams     [list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams [llength $kparams]

set timeout 50
spawn kermit
# We need to save the id because resetting the board will overwrite it.
set kermit_spawn_id $spawn_id

while 1 {
	expect {
	        "Type ?" { }
		"ermit>" { break }
		"not found" {
                   send_error "ERROR: Failed to start up kermit\n"
                   exit
		}
		timeout {
                   send_error "ERROR: Time out starting up kermit\n"
                   exit
		}
	}
}

for {set i 0} {$i < $nkparams} {incr i} {
    send [lindex $kparams $i]

   while 1 {
	  expect {
		 "ermit>" { break }

		 "\\?\[A-Z]" {
                   send_error "ERROR: Failed to set up kermit parameters\n"
                    exit
		 }

		 timeout {
                    send_error "ERROR: Time out setting up kermit parameters\n"
                    exit
		 }
	  }
    }
}

send "connect\r"
while 1 {
	expect {
		"ype the escape character*" {
		     break  }
		timeout {
		     send_error "ERROR: Can't connect to serial port\n"
		     exit }
	}
}

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
expect {

    "U-Boot" {
	send_user "We are in u-boot\n"
	set where_are_we "uboot"
    }

    "Linux" {
	send_user "We are in the kernel\n"
	set where_are_we "kernel"
    }

    timeout {
	send_user "Can't tell if we are in u-boot or the kernel\n"
    }
}

if { $where_are_we == "uboot" } {
    set timeout 50
    expect ">"
    send_user "sending reset\n"
    send "reset\r"
} else {
    if { $where_are_we == "kernel" } {
	set timeout 60
	expect ">"
	send_user "sending reboot\n"
	send "reboot\r"
    } else {
	# If we don't know where we are, hit control-C and enter
	set timeout 10
	expect "*"
	expect "*"
	send_user "sending control-C\n"
	send "\3"
	sleep 1
	send "\r"
    }
}

 while 1 {
       expect {

         "Hit any key " {
	     send "\r"     
         }

	 ">" {
	     send_user "successful reset attempt\n"	    
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"            
             break
         }
      }
   }
	

send -s "set bootargs root=/dev/mtdblock2 rw rootfstype=jffs2\r"
expect   ">" 
send "save\r"
expect   ">" 

step "Flash images."

set timeout 1200   
send -s "tftp 0x1000000 $compressed_kernel_only_image\r"
    while 1 {
	expect {
	  	      
	    "done" {
		set tftp_flag SUCCESS
#		break
	    }
	
            -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
 
                set image_size $expect_out(1,string)
                send_user "Image size is $image_size\n"
                break
            }
	    
	    timeout {
		send_user "ERROR: Uboot locked up during tftp\n"
		
		break
	    }
	}
    }
    
  
       set timeout 80
       send -s "protect off 0x20020000 0x200fffff\r"
       while 1 {
    		expect {
    
    	    	    "Un-Protected" {
				
				send_user "  unprotect success\n"
			}
	
		    ">" {
				break
			}
	
		    timeout {
	    			send_user "ERROR:  unprotect failed\n"
	    			
	    			break
			}
    		}
	}
	
              
       set timeout 240	    
 	
	send -s "erase 0x20020000 0x200fffff\r"
	while 1 {
	    expect {
	    
	    	"Erased" {
	    		send_user " erase success\n"
			break
		}
				
		timeout {
		    send_user "ERROR:  erase failed\n"
		    
		    break
		}
	    }
	}
	
        set timeout 500
 	
	send -s "cp.b 0x1000000 0x20020000 0x$image_size\r"
	while 1 {
	    expect {
	    
	    	"done" {
	    		send_user " cp success\n"
			break
		}
		
				
		timeout {
		    send_user "ERROR:  cp failed\n"
		    
		    break
		}
	    }
	}
	
############################################################################################################	
	expect ">"
	send -s "tftp 0x1000000 $jffs2_rootfs_image\r"
        while 1 {
	expect {
	    
	    "done" {
		set tftp_flag SUCCESS
#		break
	    }
	
            -re "Bytes transferred = \[0-9]+ \\\((\[0-9a-fA-F]+) hex\\\)" {
 
                set image_size $expect_out(1,string)
                send_user "Image size is $image_size\n"
                break
            }
    
	    timeout {
		send_user "ERROR: Uboot locked up during tftp\n"
		
		break
	    }
	}
    }
    
       set timeout 80
       send -s "protect off 0x20100000 0x203effff\r"
       while 1 {
    		expect {
    
    	    	    "Un-Protected" {
				
				send_user "  unprotect success\n"
			}
	
		    ">" {
				break
			}
	
		    timeout {
	    			send_user "ERROR:  unprotect failed\n"
	    			
	    			break
			}
    		}
	}
	
      
       set timeout 240	
        	
       send -s "erase 0x20100000 0x203effff\r"
	while 1 {
	    expect {
	    
	    	"Erased" {
	    		send_user " erase success\n"
			break
		}
				
		timeout {
		    send_user "ERROR:  erase failed\n"
		    
		    break
		}
	    }
	}
	
        set timeout 500
 	
	send -s "cp.b 0x1000000 0x20100000 0x$image_size\r"
	while 1 {
	    expect {
	    
	    	"done" {
	    		send_user " cp success\n"
			break
		}
		

		
		timeout {
		    send_user "ERROR:  cp failed\n"
		    
		    break
		}
	    }
	}

      expect ">"
      send -s "reset\r"
	while 1 {
        expect {

         "Hit any key " {
	     send "\3"
	     
         }

	 ">" {
	     send_user "successful reset attempt\n"
	     
	     break
	 }

         timeout {
	     send_user "failed reset attempt\n"
            
            break
         }
      }
   }
    
log_file
	
