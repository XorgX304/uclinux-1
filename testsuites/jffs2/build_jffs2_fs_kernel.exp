#!/usr/bin/expect

source ../kernel_config.exp
source  ../board_info.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"

set HAVE_JFFS2_IMAGE 1

cd $uclinux_path/testsuites

step "Make config."

source  make_default_config.exp

# Following make specific configuration for this case.

cd $uclinux_path
set timeout 300
set baud_rate_done_flag 0
spawn make config

#puts "Begin the interactive process of configuration"
while 1 {
    expect {
        -re "AnalogDevices Products.* (\[0-9]+). $board_type.*choice.*\\\[.*]" {
            send "$expect_out(1,string)\r"
        }

        -re "Customize Kernel Settings.*DEFAULTS_KERNEL.*\\\[.*]" {
            send "y\r"
        }

        -re "Customize Application/Library Settings.*DEFAULTS_VENDOR.*\\\[.*]" {
            send "y\r"
        }

        -re "Default bootloader kernel arguments.*CMDLINE_BOOL.*\\\[.*]" {
            send -s "N\r"
        }

        -re "Initial RAM filesystem and RAM disk.*initramfs/initrd.*support.*BLK_DEV_INITRD.*\\\[.*]" {
            send "N\r"
        }

        -re "Memory Technology Device .*MTD.* support.*MTD.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "MTD partitioning support.*MTD_PARTITIONS.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Direct char device access to MTD devices.*MTD_CHAR.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Caching block device access to MTD devices.*MTD_BLOCK.*\\\[.*]" {
            send -s "Y\r"
        }


        -re "Detect flash chips by Common Flash Interface \\\(CFI\\\) probe \\\(MTD_CFI\\\).*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Support for AMD/Fujitsu flash chips \\\(MTD_CFI_AMDSTD\\\).*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Support for Intel/Sharp flash chips.*MTD_CFI_INTELEXT.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Support for RAM chips in bus mapping.*MTD_RAM.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Support for ROM chips in bus mapping.*MTD_ROM.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Blackfin BF561 EZKIT Flash Chip Support \\\(MTD_EZKIT561\\\).*\\\[.*]" {
            if { $board_type == "BF561-EZKIT" } {
                send -s "Y\r"
            } else {
                send -s "N\r"
            }
        }

        -re "CFI Flash device in physical memory map.*MTD_PHYSMAP.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Physical start address of flash mapping.*MTD_PHYSMAP_START.*\\\[.*]" {
            send -s "\r"
        }

        -re "Physical length of flash mapping.*MTD_PHYSMAP_LEN.*\\\[.*]" {
                send -s "\r"
        }

        -re "Bank width in octets.*MTD_PHYSMAP_BANKWIDTH.*\\\[.*]" {
            send -s "\r"
        }

        -re "Blackfin BF533-STAMP Flash Chip Support.*MTD_BFIN_ASYNC.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Generic uClinux RAM/ROM filesystem support.*MTD_UCLINUX.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Journalling Flash File System v2.*JFFS2.*support.*JFFS2_FS.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Second extended fs support.*EXT2_FS.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "Support for frame buffer devices.*FB.*\\\[.*]" {
            send -s "N\r"
        }

        -re "Sound card support.*SOUND.*\\\[.*]" {
            send -s "N\r"
        }

####################################################################
####################################################################

        -re "mtd-utils.*USER_MTDUTILS.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "eraseall.*USER_MTDUTILS_ERASEALL.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "mkfs.jff2.*USER_MTDUTILS_MKFSJFFS2.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "file operation test.*FILE_OPERATION_TEST.*\\\[.*]" {
            send -s "Y\r"
        }

        -re "dhcpcd-new.*USER_DHCPCD_NEW_DHCPCD.*\\\[.*]" {
            send -s "N\r"
        }

        -re "portmap.*USER_PORTMAP_PORTMAP.*\\\[.*]" {
            send -s "N\r"
        }

        -re "telnetd.*USER_TELNETD_TELNETD.*\\\[.*]" {
            send -s "N\r"
        }

#Default to select it, no other choice
#        -re "Build libZ.*CONFIG_LIB_ZLIB_FORCE.*\\\[.*]" {
#            send -s "N\r"
#        }
#        -re "Build libpng.*CONFIG_LIB_LIBPNG_FORCE.*\\\[.*]" {
#            send -s "N\r"
#        }
#        -re "Build libjpeg.*CONFIG_LIB_LIBJPEG_FORCE.*\\\[.*]" {
#            send -s "N\r"
#        }

        -re "Build ncurses.*LIB_NCURSES.*\\\[.*]" {
            send -s "N\r"
        }

        -re "boa.*USER_BOA_SRC_BOA.*\\\[.*]" {
            send -s "N\r"
        }

        -re "dhrystone.*USER_DHRYSTONE_DHRYSTONE.*\\\[.*]" {
            send -s "N\r"
        }

        -re "whetstone.*USER_WHETSTONE_WHETSTONE.*\\\[.*]" {
            send -s "N\r"
        }

#no such choice
#        -re "Sqlite.*a light weight database.*CONFIG_USER_SQLITE.*\\\[.*]" {
#            send -s "N\r"
#        }

        -re "VIDEO test program.*USER_BLACKFIN_VIDEOTEST.*\\\[.*]" {
            send -s "N\r"
        }

        -re "TWI LCD test program.*USER_BLACKFIN_TWILCDTEST.*\\\[.*]" {
            send -s "N\r"
        }

        -re "netperf test tool.*USER_NETPERF_TEST.*\\\[.*]" {
            send -s "N\r"
        }

        -re "strace.*USER_STRACE_STRACE.*\\\[.*]" {
            send -s "N\r"
        }

        -re "jpegview.*USER_JPEGVIEW_JPEGVIEW.*\\\[.*]" {
            send -s "N\r"
        }

        -re "ftp.*USER_FTP_FTP_FTP.*\\\[.*]" {
            send "N\r"
        }

        -re "mp3play.*USER_MP3PLAY_MP3PLAY.*\\\[.*]" {
            send "N\r"
        }

        -re "vplay.*USER_VPLAY_VPLAY.*\\\[.*]" {
            send "N\r"
        }

        -re "vrec.*USER_VPLAY_VREC.*\\\[.*]" {
            send "N\r"
        }

        -re "gdbserver.*USER_GDB_GDBSERVER.*\\\[.*]" {
            send "N\r"
        }

        -re "gdbserver.*USER_GDBSERVER_GDBSERVER.*\\\[.*]" {
            send "N\r"
        }

        -re "Install ELF shared libraries.*INSTALL_ELF_SHARED_LIBS.*\\\[.*]" {
            send  "N\r"
        }

        -re "Install FLAT shared libraries.*INSTALL_FLAT_SHARED_LIBS.*\\\[.*]" {
            send  "N\r"
        }

        "\\\(*) \\\[*]" {
            sleep .01
            send  "\r"
        }

        -re "\[cC]hoice\\\[.*]:" {
            send  "\r"
        }

        eof {
            puts "End of configuration"
            break
        }

        timeout {
            puts "\n\nFATAL ERROR: config prompt timeout in make config"
            break
        }
    }
}


cd $uclinux_path/testsuites

step "Make"

source  make_kernel.exp

cd $uclinux_path/testsuites

step "Copy linux"

source   copy_image.exp

send_user "Ending $argv0\n"
log_file
