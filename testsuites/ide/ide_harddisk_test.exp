#!/usr/bin/expect

source ../kernel_config.exp
log_file [log_file_name "$argv0"]
send_user "Starting $argv0\n"
set TITLE [title "$argv0"]

set TEST_PASS pass
set TEST_FAIL fail

step "Start kermit."
source ../spawn_kermit.exp

step "Reboot the kernel."
source ../reboot_kernel.exp

send_log "*********************************\r"
send_log "Start $TITLE\r"
send_log "*********************************\r"
set timeout 120
set case_num 0

incr case_num
send "dmesg\r" 
while 1 {
   expect {
      "sda: sda1" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

while 1 {

incr case_num
send "fdisk /dev/sda\r" 
expect {
     -re "Command .*:" {		
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }

send "p\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
     
send "d\r" 
   expect {
     -re "Partition number.*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }

send "1\r" 
   expect {
     -re "Command .*:" {
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }

send "n\r" 
   expect {
     -re "Command action.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
 
send "p\r" 
   expect {
     -re "Partition number.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }    

send "1\r" 
   expect {
     -re "First cylinder.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     } 
 
send "\r" 
   expect {
     -re "Last cylinder.*" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     } 
     
send "+500M\r" 
   expect {
     -re "Command .*:" {
      }
      timeout {
                case_fail $case_num
                exit      
         }
     }
     
send "w\r" 
   expect {
     -re "Syncing disks." {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "mke2fs /dev/sda1\r" 
while 1 {
   expect {
     -re "done.*done" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "mount /dev/sda1 /mnt\r" 
while 1 {
   expect {
      ">" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}


incr case_num
send "cp /bin/pwd /mnt\r" 
while 1 {
   expect {
      ">" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "ls -al /mnt\r" 
while 1 {
   expect {
      ">" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "cat /proc/filesystems\r" 
while 1 {
   expect {
     -re "msdos.*vfat.*>" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "df\r" 
while 1 {
   expect {
      -re "/dev/sda1.*>" {
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

set timeout 60
incr case_num
send "time dd conv=fsync if=/dev/zero of=/mnt/test.bin bs=1M count=100\r"
while 1 {
    expect {
        -re "records in.*records out.*real.*user.*sys.*>" {
            send_user "Generate file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Generate file timeout, test fail\n"
            case_fail $case_num
        }
    }
}

set timeout 60
incr case_num
send "time cat /mnt/test.bin > /dev/null\r"
while 1 {
    expect {
        -re "real.*user.*sys.*>" {
            send_user "Read file done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "Read file timeout, test fail\n"
            case_fail $case_num
        }
    }
}


incr case_num
send "while \[ 1 \]; md5sum /mnt/pwd ; done\r" 
while 1 {
   expect {
      -re "\[0-9a-z]+  /mnt/pwd" {
                sleep 3
                send "\3"
                case_pass $case_num
		break
      }

      timeout {
                case_fail $case_num
                exit      
         }
     }
}

incr case_num
send "umount /mnt\r" 
while 1 {
   expect {
        -re "umount.*failed.*>" {
            send_user "umount failed, test fail\n"
            case_fail $case_num
        }
        -re $kernel_prompt {
            send_user "umount done, test pass\n"
            case_pass $case_num
            break
        }
        timeout {
            send_user "umount timeout, test fail\n"
            case_fail $case_num
        }
     }
}


send_log "                     \n"
send_log "\n$TITLE ............\[PASS\]\n"
                                     
send_user "Ending $argv0\n"
log_file
 


