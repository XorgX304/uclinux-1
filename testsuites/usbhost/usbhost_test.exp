#!/usr/bin/expect

# Main entrance
log_file usbhost_test_log
send_log "\nUSB host test is starting...\r"
send_user "Starting usbhost_test.exp\n"

set user /home/test
set uclinux_path $user/checkouts/kernel/uClinux-dist
set ttydev /dev/ttyS0
set send_slow {1 0.1}

set TITLE "USB Host Test"

proc step { message } {
  global step_sequence_number

  puts "\n*******************************************************************"
  puts "STEP $step_sequence_number: $message\n\n"
  send_log "\n************** STEP $step_sequence_number: $message\n\n"
  incr step_sequence_number
}

proc tquit { message } {
   send_log "\nTest exit: $message\n"
   send_user "\nTest exit: $message\n"
   exit
}

set step_sequence_number    1

step "Start kermit"
#set argc [llength $argv]
#if { $argc < 1 } {
#	send_user "\nAppend /dev/ttyS0\n"
#}
#set ttydev	[lindex $argv 0]

set kparams	[list "set line $ttydev\r"]
lappend kparams "set speed 57600\r"
lappend kparams "set carrier-watch off\r"
lappend kparams "set handshake none\r"
lappend kparams "set flow-control none\r"
lappend kparams "robust\r"
lappend kparams "set file type bin\r"
lappend kparams "set file name lit\r"
lappend kparams "set rec pack 1000\r"
lappend kparams "set send pack 1000\r"
lappend kparams "set window 5\r"
lappend kparams "set escape 255\r"
set nkparams	[llength $kparams]

set timeout 5
spawn kermit
set kermit_spawn_id $spawn_id

while { 1 } {
   expect {
      "Type ?" { }
      "ermit>" {
         break
      }
      "not found" {
         send_log "\nERROR: Failed to start Kermit\n"
      }
      timeout {
         send_log "\nERROR: Time out starting up kermit\n"
      }
   }
}

for {set i 0} {$i < $nkparams} {incr i} {
   send [lindex $kparams $i]

   while 1 {
      expect {
         "ermit>" { break }
         "\\?\[A-Z]" {
            send_log "\nERROR: Failed to set up kermit parameters\n"
         }
         timeout {
            send_log "\nERROR: Time out setting up kermit parameters\n"
         }
      }
   }
}

send "connect\r"
while 1 {
   expect {
      "ype the escape character*" {
         break
      }
      timeout {
         send_log "\nERROR: Can't connect to serial port\n"
         send_log "\n$TITLE ............\[FAIL\]\n"
         exit
      }
   }
}

step "Restart the board."

send_user "Try to figure out if we are in u-boot or the kernel"
set where_are_we 0
send "version\r"
set timeout 20
expect {

   "U-Boot" {
      send_user "We are in u-boot\n"
      set where_are_we "uboot"
   }

   "Linux" {
      send_user "We are in the kernel\n"
      set where_are_we "kernel"
   }

   timeout {
      send_user "Can't tell if we are in u-boot or the kernel\n"
   }
}

if { $where_are_we == "uboot" } {
   set timeout 50
   expect ">"
   send_user "sending reset\n"
   send "reset\r"
} else {
   if { $where_are_we == "kernel" } {
      set timeout 60
      expect ">"
      send_user "sending reboot\n"
      send "reboot\r"
   } else {
      set timeout 10
      expect "*"
      expect "*"
      send_user "sending control-C\n"
      send "\3"
      sleep 1
      send "\r"
   }
}

while 1 {
   expect {

      "Hit any key " {
         send "\r"
      }

      ">" {
         send_user "successful reset attemp\n"
         break
      }

      timeout {
         send_user "failed reset attemp\n"
         break
      }
   }
}

send -s "set bootargs root=/dev/mtdblock0 rw\r"
expect ">"
send -s "save\r"
expect ">"

send -s "tftpboot 0x1000000 linux\r"
while 1 {
   expect {
      "#" {
         expect ">"
            break
      }
      timeout {
         puts "Fail tftp"
         break
      }
   }
}

send -s "boote\r"

set timeout 180
while 1 {
   expect {

      -re "Kernel panic" {
         report "kernel panic detected... trying to recover from it"
         break
      }

      -re "Sash command shell.*/> " {
         puts "successful boot attempt"
         break
      }

      "root:~> " {
         puts "successful boot attempt"
         break
      }

      -re "Linux version (.*) " {
         set linux_version $expect_out(1,string)
      }

      # Look for gcc version N.N[.N[.N]]
      -re "gcc version (\[0-9](\.\[0-9]+)+)" {
         set gcc_version [lindex $expect_out(0,string) 2]
      }

      # Look for text followed by 1 or more spaces or tabs
      # followed by = followed by 1 or more spaces or tabs
      # followed by (0xNNNNNN-0xNNNNNN)
      -re "text\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
         set map_text $expect_out(1,string)
      }

      -re "data\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
         set map_data $expect_out(1,string)
      }

      -re "bss\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
         set map_bss $expect_out(1,string)
      }

      -re "rootfs\[\x20\t]+=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
         set map_rootfs $expect_out(1,string)
      }

      # Note that here we're looking for zero or 1 space. Doh!
      -re "stack\[\x20\t]?=\[\x20\t]+(0x\[0-9a-fA-F]+-0x.....\[0-9a-fA-F]+)" {
         set map_stack $expect_out(1,string)
      }

      -re "\[Ii]nstruction \[Cc]ache \[Ee]nabled" {
         # set instruction_cache_boot_flag $CACHE_ENABLED
      }

      -re "\[Ii]nstruction \[Cc]ache \[Dd]isabled" {
         # set instruction_cache_boot_flag $CACHE_DISABLED
      }

      -re "\[Dd]ata \[Cc]ache \[Ee]nabled" {
         # set data_cache_boot_flag $CACHE_ENABLED
      }

      -re "\[Dd]ata \[Cc]ache \[Dd]isabled" {
         #set data_cache_boot_flag $CACHE_DISABLED
      }

      timeout {
         puts "failed boot attempt"
         break
      }
   }
}

sleep 5

step "Start USB host testing"

sleep 10
send "\r"
while 1 {
   expect {
      -re "Vendor.*" {
         sleep 2
         send "\r"
         break
      }
      timeout {
         send "\r"
         break
      }
   }
}
sleep 2
send "\r"

step "mount on usb flash disk"
set timeout 2
send "mount -t vfat /dev/sda1 /mnt\r"
while 1 {
   expect {
      -re "root:~>" {
         send_log "\nmount on usb flash disk done\n"
         send_user "\nmount on usb flash disk done\n"
         break
      }

      -re ".*failed" {
         send_log "\nmount on usb flash disk failed\n"
         send_user "\nmount on usb flash disk failed\n"
         break
      }

      timeout {
         send_log "\nmount on usb flash disk timeout\n"
         send_user "\nmount on usb flash disk timeout\n"
         break
      }
   }
}

step "check mount result"
send "mount\r"
set timeout 5
while 1 {
   expect {
      -re "/dev/sda1 on /mnt type vfat.*" {
         send_log "\nmount on usb flash disk succeeds\n"
         send_user "\nmount on usb flash disk succeeds\n"
         break
      }
      timeout {
         send_log "\n$TITLE ............\[FAIL\]\n"
         tquit "Test failed, not found mount point"
      }
   }
}

step "creat file"
send "echo teststring > usbhost_testfile\r"
send "cat usbhost_testfile\r"
while 1 {
   expect {
      -re "teststring" {
         send_log "\ncatch file\n"
         send_user "\ncatch file\n"
         send "\r"
         break
      }

      timeout {
         break
      }
   }
}

step "delete file"
send "rm usbhost_testfile\r"
expect "root:>"
send "\r"
send "ls /mnt/usbhost_testfile\r"
set timeout 2
while 1 {
   expect {

      -re ".*No such file or directory" {
          break
      }

      timeout {
         break
         tquit "test fail, delete file failed"
      }
   }
}


send "umount /mnt\r"
while 1 {
   expect {
      -re "root:~>" {
         break
      }
      timeout {
         send_log "\numount timeout\n"
         send_user "\numount timeout\n"
         break
      }
   }
}

send "mount\r"
while 1 {
   expect {
      -re "/dev/sda1 on /mnt type vfat.*" {
         send_log "\n$TITLE ............\[FAIL\]\n"
         tquit "Test failed, umount failed"
      }
      -re "root:~>" {
         send_log "\n$TITLE ............\[PASS\]\n"
         tquit "Test Pass"
      }
      timeout {
         send_log "\n$TITLE ............\[FAIL\]\n"
         tquit "Test failed, umount timeout"
      }
   }
}

exit
