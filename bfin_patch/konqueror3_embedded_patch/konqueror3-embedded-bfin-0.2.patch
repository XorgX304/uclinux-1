--- konqueror3-embedded/konq-embed/src/Makefile.in	2006-01-21 19:50:26.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/src/Makefile.in	2006-03-09 17:26:15.252618128 +0800
@@ -558,7 +558,7 @@
 	done
 konqueror$(EXEEXT): $(konqueror_OBJECTS) $(konqueror_DEPENDENCIES) 
 	@rm -f konqueror$(EXEEXT)
-	$(CXXLINK) $(konqueror_LDFLAGS) $(konqueror_OBJECTS) $(konqueror_LDADD) $(LIBS)
+	$(CXXLINK) $(konqueror_LDFLAGS) $(konqueror_OBJECTS) $(konqueror_LDADD) $(LIBS) ../dropin/kio/.libs/libkiodropin.a
 
 mostlyclean-compile:
 	-rm -f *.$(OBJEXT)
--- konqueror3-embedded/konq-embed/kdesrc/kjs/Makefile.in	2006-01-21 19:50:26.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/kdesrc/kjs/Makefile.in	2006-03-08 18:11:33.000000000 +0800
@@ -475,7 +475,7 @@
 #>- libkjs_la_LDFLAGS = -version-info 3:0:2 -no-undefined $(VSCRIPT) \
 #>-           $(USER_LDFLAGS) $(all_libraries)
 #>+ 2
-libkjs_la_LDFLAGS = -version-info 3:0:2 -no-undefined $(KDE_NO_UNDEFINED) $(VSCRIPT) \
+libkjs_la_LDFLAGS = -version-info 3:0:2 $(VSCRIPT) \
           $(USER_LDFLAGS) $(all_libraries)
 
 libkjs_la_LIBADD = -lm $(LIBPCRE)
--- konqueror3-embedded/konq-embed/dropin/kio/kio_file.cpp	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kio/kio_file.cpp	2006-03-21 18:07:27.633201280 +0800
@@ -114,7 +114,11 @@
 		return;
 	    }
 
+#ifdef NOMMU
+	    int pid = vfork();
+#else
 	    int pid = fork();
+#endif
 	    if ( pid == -1 )
 	    {
 		error( KIO::ERR_CANNOT_LAUNCH_PROCESS, path );
@@ -150,7 +154,11 @@
 		::setenv( "PROTOCOL_NAME", mProtocol.data(), true );
 		QDir::setCurrent( info.dirPath( true ) );
 		execl( path.latin1(), path.latin1(), 0 );
+#ifdef NOMMU
+		_exit( errno );
+#else
 		::exit( errno );
+#endif
 	    }
 	    ::close( pipefd[1] );
 	    if ( !file.open( IO_ReadOnly, pipefd[0] ) )
--- konqueror3-embedded/konq-embed/dropin/kio/mimehandler.cpp	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kio/mimehandler.cpp	2006-03-21 18:07:49.600861688 +0800
@@ -61,7 +61,11 @@
     {
 	if ( ::pipe( m_pipe_in ) == 0 )
 	{
+#ifdef NOMMU
+	    int pid = vfork();
+#else
 	    int pid = fork();
+#endif
 	    if ( pid == -1 )
 	    {
 		::close( m_pipe_in[0] );
@@ -80,7 +84,11 @@
 		::setenv( "FILTER_URL", url.url().latin1(), TRUE );
 		const char *exe = app.latin1();
 		::execlp( exe, exe, 0 );
+#ifdef NOMMU
+		_exit( errno );
+#else
 		::exit( errno );
+#endif
 	    }
 	    else
 	    {
--- konqueror3-embedded/konq-embed/dropin/kio/launcher.h	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kio/launcher.h	2006-03-21 16:23:47.437814712 +0800
@@ -30,6 +30,41 @@
 {
     class Slave;
 
+#ifdef NOMMU
+#define STACK_SIZE 1024*32
+
+    class LauncherChildData
+    {
+    public:
+        unsigned int stack[STACK_SIZE];
+        int launcherFds[ 2 ];
+        LauncherChildData(int launcherFds[2])
+        {
+            this->launcherFds[0] = launcherFds[0];
+            this->launcherFds[1] = launcherFds[1];
+        }
+    };
+
+    class SlaveChildData
+    {
+    public:
+        unsigned int stack[STACK_SIZE];
+        int slaveReadFd;
+        int slaveWriteFd;
+        int dcopReadFd;
+        int dcopWriteFd;
+        QString protocol;
+        SlaveChildData(int slaveReadFd, int slaveWriteFd, int dcopReadFd, int dcopWriteFd, const char* protocol)
+        {
+            this->slaveReadFd = slaveReadFd;
+            this->slaveWriteFd = slaveWriteFd;
+            this->dcopReadFd = dcopReadFd;
+            this->dcopWriteFd = dcopWriteFd;
+            this->protocol = QString::fromLatin1(protocol);
+        }
+    };
+#endif
+    
     class Launcher
     {
     public:
@@ -76,6 +111,10 @@
         int m_socket;
         pid_t m_launcherPid;
 #endif
+#ifdef NOMMU
+	static int launcherChild(void *arg);
+	static int slaveChild(void *arg);
+#endif
 
         static Launcher *s_self;
     };
--- konqueror3-embedded/konq-embed/dropin/kio/launcher.cpp	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kio/launcher.cpp	2006-03-21 18:04:47.000000000 +0800
@@ -30,6 +30,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <assert.h>
+#ifdef NOMMU
+#include <sched.h>
+#endif
 
 #include <kdebug.h>
 #include <kio/slave.h>
@@ -131,6 +134,19 @@
         ::kill( m_launcherPid, SIGTERM );
 }
 
+#ifdef NOMMU
+int Launcher::launcherChild(void *arg)
+{
+    LauncherChildData *lcd = (LauncherChildData *)arg;
+    ::close( lcd->launcherFds[ 0 ] );
+
+    Launcher l( lcd->launcherFds[ 1 ] );
+    l.dispatchLoop();
+    delete lcd;
+    return 0;
+}
+#endif
+
 void Launcher::startLauncherProcess()
 {
     int launcherFds[ 2 ];
@@ -141,8 +157,11 @@
         ::exit( 1 );
     }
 
+#ifdef NOMMU
+    LauncherChildData *lcd = new LauncherChildData(launcherFds);
+    pid_t pid = clone(Launcher::launcherChild, lcd->stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, lcd);
+#else
     pid_t pid = fork();
-
     if ( pid == 0 )
     {
         ::close( launcherFds[ 0 ] );
@@ -152,6 +171,7 @@
 
         ::exit( 0 );
     }
+#endif
 
     ::close( launcherFds[ 1 ] );
 
@@ -289,6 +309,31 @@
     }
 }
 
+#ifdef NOMMU
+int Launcher::slaveChild(void *arg)
+{
+    SlaveChildData *scd = (SlaveChildData *)arg;
+    Connection *connection = new Connection;
+    connection->init( scd->slaveReadFd, scd->slaveWriteFd );
+
+    SlaveBase *slave = SlaveBase::createSlave( scd->protocol );
+
+    assert( slave );
+
+    slave->setConnection( connection );
+
+    connection = new Connection;
+    connection->init( scd->dcopReadFd, scd->dcopWriteFd );
+
+    DCOPClient::setGlobalConnection( connection );
+
+    slave->dispatchLoop();
+
+    delete scd;
+    return 0;
+}
+#endif
+
 bool Launcher::createSlaveInternal( const char *protocol, cmsghdr *controlmsg )
 {
     qDebug( "launcher: creating slave for protocol %s", protocol );
@@ -300,6 +345,11 @@
     int dcopReadFd = *fdPtr++;
     int dcopWriteFd = *fdPtr;
 
+#ifdef NOMMU
+    SlaveChildData *scd = new SlaveChildData(slaveReadFd, slaveWriteFd, 
+        dcopReadFd, dcopWriteFd, protocol);
+    pid_t pid = clone(slaveChild, scd->stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, scd);
+#else
     pid_t pid = fork();
 
     if ( pid == 0 )
@@ -324,6 +374,7 @@
 
         ::exit( 0 );
     }
+#endif
 
     assert( pid != -1 );
 
--- konqueror3-embedded/konq-embed/dropin/kio/krun.cpp	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kio/krun.cpp	2006-03-21 18:08:05.056512072 +0800
@@ -281,7 +281,11 @@
     if ( passdata && ::pipe( filedes ) )
 	return -1;
 
+#ifdef NOMMU
+    int pid = vfork();
+#else
     int pid = fork();
+#endif
     if ( pid == -1 )
     {
 	if ( passdata )
@@ -316,8 +320,12 @@
     if ( !ref.isEmpty() )
 	::setenv( "PROTOCOL_REFERER", ref.latin1(), true );
     execlp( app.local8Bit().data(), app.local8Bit().data(), arg.local8Bit().data(), 0 );
+#ifdef NOMMU
+    _exit( errno );
+#else
     ::exit( errno );
 #endif
+#endif
     return -1;
 }
 
--- konqueror3-embedded/konq-embed/dropin/kapplication.h	2006-01-08 08:26:19.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kapplication.h	2006-03-21 16:23:51.982123872 +0800
@@ -56,6 +56,21 @@
 
 #include <kglobalsettings.h>
 
+#ifdef NOMMU
+#define STACK_SIZE 1024*32
+
+class ServiceChildData
+{
+public:
+    unsigned int stack[STACK_SIZE];
+    void *serviceEntryPoint;
+    ServiceChildData(void *serviceEntryPoint)
+    {
+        this->serviceEntryPoint = serviceEntryPoint;
+    }
+};
+#endif
+
 class KApplication : public QApplication, public KInstance
 {
     Q_OBJECT
@@ -66,6 +81,10 @@
     KApplication( int &argc, char **argv, const char *name );
     virtual ~KApplication();
 
+#ifdef NOMMU
+    static int serviceChild(void *arg);
+#endif
+    
     static KApplication *self() { return s_self; }
     static KApplication *kApplication() { return self(); } // for render_form.cpp
 
--- konqueror3-embedded/konq-embed/dropin/kapplication.cpp	2005-12-04 10:13:04.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/dropin/kapplication.cpp	2006-03-21 18:05:27.000000000 +0800
@@ -31,6 +31,10 @@
 #include <qdir.h>
 
 #include <assert.h>
+#ifdef NOMMU
+#include <sched.h>
+#include <signal.h>
+#endif
 
 bool kde_kiosk_admin = false;
 
@@ -69,11 +73,29 @@
     s_serviceEntryPoint = entryPoint;
 }
 
+#ifdef NOMMU
+int KApplication::serviceChild(void *arg)
+{
+    ServiceChildData *scd = (ServiceChildData *)arg;
+
+    typedef int (*EntryFunc)(int, char **);
+    EntryFunc func = (EntryFunc)scd->serviceEntryPoint;
+    (*func)( qApp->argc(), qApp->argv() );
+
+    delete scd;
+    return 0;
+}
+#endif
+
 bool KApplication::startServiceByDesktopPath( const QString &path )
 {
     // ### hack
     if ( s_serviceName && path == *s_serviceName && s_serviceEntryPoint )
     {
+#ifdef NOMMU
+        ServiceChildData *scd = new ServiceChildData(s_serviceEntryPoint);
+        clone(serviceChild, scd->stack + STACK_SIZE - 4, CLONE_VM|SIGCHLD, scd);
+#else
         if ( fork() == 0 )
         {
             typedef int (*EntryFunc)(int, char **);
@@ -81,6 +103,7 @@
             (*func)( qApp->argc(), qApp->argv() );
             ::exit( 0 );
         }
+#endif
 
         return true;
     }
--- konqueror3-embedded/konq-embed/add-ons/pppdialer/pppdialer.cpp	2003-02-03 23:59:25.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/add-ons/pppdialer/pppdialer.cpp	2006-03-21 18:09:31.136425936 +0800
@@ -341,7 +341,11 @@
     if ( 0 == ::socketpair( AF_UNIX, SOCK_STREAM, PF_UNIX, spair ) )
     {
 	int i;
+#ifdef NOMMU
+	switch( vfork() )
+#else
 	switch( ::fork() )
+#endif
 	{
 	    case -1:
 		// error
@@ -353,7 +357,11 @@
 		    ::close( i );
 		::execl( s_script.latin1(), s_script.latin1(),
 			 command, arg, 0 );
+#ifdef NOMMU
+		_exit( errno );
+#else
 		::exit( errno );
+#endif
 	    default:
 		// parent
 		::close( spair[0] );
--- konqueror3-embedded/konq-embed/kdesrc/khtml/test_regression.cpp	2005-12-20 03:48:32.000000000 +0800
+++ konqueror3-embedded.bfin/konq-embed/kdesrc/khtml/test_regression.cpp	2006-03-09 17:28:54.000000000 +0800
@@ -474,7 +474,11 @@
 
     if (args->isSet("xvfb"))
     {
+#ifdef NOMMU
+        xvfb = vfork();
+#else
         xvfb = fork();
+#endif
         if ( !xvfb ) {
             char buffer[1000];
             sprintf( buffer, "%s/resources,/usr/X11R6/lib/X11/fonts/75dpi:unscaled,/usr/X11R6/lib/X11/fonts/misc:unscaled,/usr/X11R6/lib/X11/fonts/Type1", (const char *)baseDir );
